<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE func-lib PUBLIC "-//Lucee//DTD CFML Function Library 1.0//EN"
	"dtd/web-cfmfunctionlibrary_1_0.dtd">
<func-lib>
	<flib-version>1.00</flib-version>
	<short-name>fbase</short-name>
	<uri>http://www.lucee.org/cf-fld-3-1</uri>
	<display-name>Lucee Core Function Library</display-name>
	<description>All build in Functions of Lucee</description>
	

	<!-- AjaxLink -->
	<function>
		<name>AjaxLink</name>
		<class>lucee.runtime.functions.displayFormatting.AjaxLink</class>
		<status>unimplemeted</status>
		<keywords>ajax</keywords>
		<description>Causes an HTML href attribute to display link results in the current Ajax container.</description>
		<argument>
			<name>url</name>
			<type>string</type>
			<required>Yes</required>
			<description>The URL of the link.</description>
		</argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- array -->
	<function>
		<name>array</name>
		<class>lucee.runtime.functions.arrays.Array_</class>
		<keywords>array</keywords>
		<description>Creates a new array</description>
		<argument-type>dynamic</argument-type>
		<return>
			<type>array</type>
		</return>
	</function>
	
	<!-- ArrayIsDefined -->
	<function>
		<name>ArrayIsDefined</name>
		<class>lucee.runtime.functions.arrays.ArrayIsDefined</class>
		<member-name>isDefined</member-name>
		<keywords>array,decision</keywords>
		<description>Returns whether there exists an item in the array at the selected index.</description>
		<argument>
			<name>array</name>
			<type>array</type>
			<required>Yes</required>
			<description>The array to search</description>
		</argument>
		<argument>
			<name>index</name>
			<type>number</type>
			<required>Yes</required>
			<description>The index which to check</description>
		</argument>
		<return>
			<type>boolean</type>
		</return>
	</function>

	<!-- arrayNew -->
	<function>
		<name>arrayNew</name>
		<class>lucee.runtime.functions.arrays.ArrayNew</class>
		<keywords>array</keywords>
		<description>create a new array</description>
		<argument>
			<name>dimension</name>
			<type>number</type>
			<required>no</required>
			<default>1</default>
			<description>Number of dimensions in new array: 1, 2, or 3</description>
    	</argument>
    	<argument>
			<name>synchronized</name>
			<alias>isSynchronized</alias>
			<type>boolean</type>
			<required>no</required>
			<default>true</default>
			<description>Number of dimensions in new array: 1, 2, or 3</description>
    	</argument>
		<return>
			<type>array</type>
		</return>
	</function>
	
	<!-- beat -->
	<function>
		<name>beat</name>
		<class>lucee.runtime.functions.dateTime.Beat</class>
		<description>
		Outputs the actuell swatch time.
		It is a new system of time developed by Swatch, the Swiss watch maker.  
		It involves setting the current day into 1000 "beats" instead of 24 hours.  
		Internet Time eliminates the need for geographical time zones, perfect for the internet.
		</description>
		<argument>
			<name>time</name>
			<type>any</type>
			<required>No</required>
			<description>
			the local time to geat beat time from
			</description>
		</argument>
		<return>
			<type>number</type>
		</return>
	</function>
	
	<!-- CacheSetProperties -->
	<function>
		<name>CacheSetProperties</name>
		<class>lucee.runtime.functions.cache.CacheSetProperties</class>
		<description>
		This function is not supported by Lucee, because we see this as a security risk, you can modifie cache configuration without a password,
you can use tag cfadmin instead. we will add support for this function in a future release, but then you can enable,disable this  function in admin for every single cache instance.</description>
		<argument>
			<name>propsSruct</name>
			<alias>properties,props</alias>
			<type>struct</type>
			<required>yes</required>
			<description>A structure specifying the cache properties plus identifying information</description>
		</argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	<!-- componentInfo -->
	<function>
		<name>componentInfo</name>
		<class>lucee.runtime.functions.component.ComponentInfo</class>
		<status>deprecated</status>
		<description>this function is deprecated, use function getMetadata instead.</description>
		<argument>
			<name>component</name>
			<type>component</type>
			<required>Yes</required>
		<description>component to return info for it</description>
    </argument>
		<return>
			<type>struct</type>
		</return>
	</function>
	
	<!-- componentCacheClear -->
	<function>
		<name>componentCacheClear</name>
		<class>lucee.runtime.functions.component.ComponentCacheClear</class>
		<description>flush the component path cache</description>
		<return>
			<type>void</type>
		</return>
	</function>
	
	<!-- componentCacheList -->
	<function>
		<name>componentCacheList</name>
		<class>lucee.runtime.functions.component.ComponentCacheList</class>
		<description>list elements in the component path cache</description>
		<return>
			<type>struct</type>
		</return>
	</function>

	<!-- createObject -->
	<function>
		<name>createObject</name>
		<!-- <status>deprecated</status> -->
		<class>lucee.runtime.functions.other.CreateObject</class>
		<modified>5.0.0.0</modified>
		<description>
		The CreateObject function takes different arguments depending on the value of the first argument:
        CreateObject('com', class, context, serverName)
        CreateObject('component', component-name)
        CreateObject('java', class, ...)
        CreateObject('webservice', urltowsdl, [, portname])</description>
		<argument>
			<name>type</name>
			<type>string</type>
			<required>Yes</required>
		<description>one of the following:
- java: for loading a java object
- webservice: for loading a remote webservice 
- component: for loading a Component (this functions does not call the init method of the component)
- com: for loading a com Object</description>
    </argument>
		<argument>
			<name>classname</name>
			<alias>component,class</alias>
			<type>string</type>
			<required>no</required>
		<description>
the usage of this argument depend on type defined with argument "type":
- java: java class to load
- webservice: WSDL url to call
- component: The CFC name; corresponds to the name of the file that defines the component
- com: Component ProgID for the object to invoke.
		</description>
    </argument>
		<argument>
			<name>context</name>
			<alias>bundleName,name,webservice</alias>
			<type>object</type>
			<required>No</required>
		<description>
the usage of this argument depend on type defined with argument "type":
- com: not used (ignored)
- java: "classpath" or "bundleName" used to load the defined class, 
this can be a list of multiple paths (directories containing class files or jar files) as string list or array or a name of an OSGi bundle (Lucee can download OSGi bundles automatically if necessary)
- webservice: a struct containing the following optional keys (username,password,proxyServer,proxyPort,proxyUser,proxyPassword) 
- component: not used (ignored)
</description>
    </argument>
		<argument>
			<name>delimiterOrVersion</name>
			<alias>delimiter,version,bundleVersion</alias>
			<type>object</type>
			<required>No</required>
		<description>
the usage of this argument depend on type defined with argument "type":
- java: delimiter used for the classpath (default comma) or bundle version when the previous argument was a bundle name
- webservice: not used (ignored)
- component: not used (ignored)
- com: not used (ignored)</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- createODBCDate -->
	<function>
		<name>createODBCDate</name>
		<class>lucee.runtime.functions.dateTime.CreateODBCDate</class>
		<status>deprecated</status>
		<description>Creates an ODBC date object.</description>
		<argument>
			<name>date</name>
			<type>datetime</type>
			<required>Yes</required>
			<description>date object</description>
    	</argument>
		<return>
			<type>datetime</type>
		</return>
	</function>
	
	<!-- createODBCDateTime -->
	<function>
		<name>createODBCDateTime</name>
		<class>lucee.runtime.functions.dateTime.CreateODBCDateTime</class>
		<status>deprecated</status>
		<description>Creates an ODBC date-time object.</description>
		<argument>
			<name>date</name>
			<type>datetime</type>
			<required>Yes</required>
		<description>date object</description>
    </argument>
		<return>
			<type>datetime</type>
		</return>
	</function>
	
	<!-- createODBCTime -->
	<function>
		<name>createODBCTime</name>
		<class>lucee.runtime.functions.dateTime.CreateODBCTime</class>
		<description>Creates an ODBC time object.</description>
		<argument>
			<name>date</name>
			<type>datetime</type>
			<required>Yes</required>
		<description>date object</description>
    </argument>
		<return>
			<type>datetime</type>
		</return>
	</function>
	
	<!-- dateFormat -->
	<function>
		<name>dateFormat</name>
		<member-name>dateFormat</member-name>
        <member-type>date</member-type>
        
		<class>lucee.runtime.functions.displayFormatting.DateFormat</class>
		<keywords>date,string,formatting</keywords>
		<description>Formats a date string to a given output</description>
		<argument>
			<name>date</name>
			<type>any</type>
			<required>Yes</required>
		<description>Date object</description>
    </argument>
		<argument>
			<name>mask</name>
			<type>string</type>
			<required>No</required>
			<default>dd-mmm-yy</default>
		<description>
Characters that show how Lucee displays a date:
- d: Day of the month as digits; no leading zero for single-digit days.
- dd: Day of the month as digits; leading zero for single-digit days.
- ddd: Day of the week as a three-letter abbreviation.
- dddd: Day of the week as its full name.
- m: Month as digits; no leading zero for single-digit months.
- mm: Month as digits; leading zero for single-digit months.
- mmm: Month as a three-letter abbreviation.
- mmmm: Month as its full name.
- yy: Year as last two digits; leading zero for years less than 10.
- yyyy: Year represented by four digits.
- gg: Period/era string. Ignored. Reserved. The following masks tell how to format the full date and cannot be combined with other masks:
- z: Time zone in literal format, for example, IST
- Z: Time zone in hours of offset (RFC 822 TimeZone), for example, +0530
- X: Time zone in hours of offset in ISO 8601 format. The following are the three ways of using 'X':
         X: +05
         XX: +0530
         XXX: +5:30

- short: equivalent to m/d/y
- medium: equivalent to mmm d, yyyy
- long: equivalent to mmmm d, yyyy
- full: equivalent to dddd, mmmm d, yyyy</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>No</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	
	<!-- dateTimeFormat -->
	<function>
		<name>dateTimeFormat</name>
		<class>lucee.runtime.functions.displayFormatting.DateTimeFormat</class>
		<member-name>dateTimeFormat</member-name>
		<member-type>date</member-type>
		<keywords>date,string,formatting</keywords>
		<description>Formats a date/time string to a given output</description>
		<argument>
			<name>datetime</name>
			<alias>date</alias>
			<type>any</type>
			<required>Yes</required>
		<description>Datetime object</description>
    </argument>
		<argument>
			<name>mask</name>
			<type>string</type>
			<required>No</required>
			<default>dd-MMM-yyyy HH:nn:ss</default>
		<description>
Mask that has to be used for formatting. 
the following characters are pattern letters (case sensitive) representing the components of a datetime string. All other characters are not interpreted
- a,..,aaaa: AM/PM marker (see also "t" and "tt"; Example:AM)
- d: Day in month, no leading zero for single-digit days (Example:3)
- dd: Day in month, leading zero for single-digit days (Example:03)
- D: Day in year, no leading zero for single-digit days (Example:4)
- DD: Day in month, leading zero for single-digit days (Example:04)
- DDD: Day in month, 2 leading zero for single-digit days (Example:004)
- E,EE,EEE: Day of week as a three-letter abbreviation (Example:Tue)
- EEEE: Day of week as its full name (Example:Tuesday)
- F: Day of week in month, no leading zero for single-digit days (Example:4)
- FF: Day of week in month, leading zero for single-digit days (Example:04)
- G,GG: Era designator (Example:AD)
- h: Hour in am/pm (1-12), no leading zero for single-digit hours (Example:3)
- hh: Hour in am/pm (1-12), leading zero for single-digit hours (Example:03)
- H: Hour in day (0-23), no leading zero for single-digit hours (Example:14)
- HH: Hour in day (00-23), leading zero for single-digit hours (Example:14)
- k: Hour in day (1-24), no leading zero for single-digit hours (Example:15)
- kk: Hour in day (1-24), leading zero for single-digit hours (Example:15)
- K: Hour in am/pm (0-11), no leading zero for single-digit hours (Example:2)
- KK: Hour in am/pm (0-11), leading zero for single-digit hours (Example:02)
- l,L: milliseconds, with no leading zeros (Example:3)
- ll,LL: milliseconds, leading zero for single-digit days (Example:03)
- lll,LLL: milliseconds,  2 leading zero for single-digit days (Example:003)
- m,M: Month as digits, no leading zero for single-digit months (Example:6)
- mm,MM: Month as digits, leading zero for single-digit months (Example:06)
- mmm,MMM: Month as a three-letter abbreviation (Example:Jun)
- mmmm,MMMM: Month as its full name (Example:June)
- n,N: minutes in hour, no leading zero for single-digit minutes (Example:3)
- nn,NN: minutes in hour, leading zero for single-digit minutes (Example:03)
- s,S: seconds in minute, no leading zero for single-digit seconds (Example:3)
- ss,SS: seconds in minute, leading zero for single-digit seconds (Example:03)
- t,T: one-character time marker string (Example:P)
- tt,TT: multiple-character time marker string (Example:PM)
- w: Week in year, no leading zero for single-digit hours (Example:27)
- ww: Week in year, leading zero for single-digit hours (Example:27)
- W: Week in month, no leading zero for single-digit hours (Example:2)
- WW: Week in month, leading zero for single-digit hours (Example:02)
- y,yy,yyy: Year as last two digits, leading zero for single-digit (Example:09)
- yyyy: Year represented by four digits (Example:2009)
- z,zz,zzz: General time zone as a 3 to 4 lettesr abbreviation (Example:PST)
- zzzz: General time zone as its full name (Example:Pacific Standard Time)
- Z,..,ZZZZ: RFC 822 time zone (Example:-0800)
  
The following masks can be used to format the full date and time and may not be combined with other masks:
- short: equivalent to "m/d/y h:mm tt"
- medium: equivalent to "mmm d, yyyy h:mm:ss tt"
- long: medium followed by three-letter time zone; i.e. "mmmm d, yyyy h:mm:ss tt zzz"
- full: equivalent to "dddd, mmmm d, yyyy h:mm:ss tt zz"
- ISO8601: equivalent to "yyyy-mm-dd'T'HH:nn:ss'Z'Z"

The function follows Java date time mask.  For details, see the section Date and Time Patterns at http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html
</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>No</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- datePart -->
	<function>
		<name>datePart</name>
		<class>lucee.runtime.functions.dateTime.DatePart</class>
		<member-name>part</member-name>
		<member-position>2</member-position>
		<description>Extracts the given date part from the date object</description>
		<argument>
			<name>datepart</name>
			<alias>part</alias>
			<type>string</type>
			<required>Yes</required>
		<description>one of the following:
- yyyy: Year
- q: Quarter
- m: Month
- y: Day of year
- d: Day
- w: Weekday
- ww: Week
- h: Hour
- n: Minute
- s: Second
- l: Millisecond
</description>
    </argument>
		<argument>
			<name>date</name>
			<type>datetime</type>
			<required>Yes</required>
		<description>dateobject the get part from</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>No</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>	

	<!-- dayOfWeek -->
	<function>
		<name>dayOfWeek</name>
		<class>lucee.runtime.functions.dateTime.DayOfWeek</class>
		<member-name>dayOfWeek</member-name>
		<description>Determines the day of the week, in a date.</description>
		<argument>
			<name>date</name>
			<type>datetime</type>
			<required>Yes</required>
		<description>Date/time object</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>no</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>
	
	<!-- lsdayOfWeek -->
	<function>
		<name>lsdayOfWeek</name>
		<class>lucee.runtime.functions.international.LSDayOfWeek</class>
		<member-name>lsDayOfWeek</member-name>
		<description>Returns the day of the week the date represents in locale format</description>
		<argument>
			<name>date</name>
			<type>datetime</type>
			<required>Yes</required>
		<description>datetime object</description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>no</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>no</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>
	
	<!-- dayOfYear -->
	<function>
		<name>dayOfYear</name>
		<class>lucee.runtime.functions.dateTime.DayOfYear</class>
		<member-name>dayOfYear</member-name>
		<description>Determines the day of the year, in a date.</description>
		<argument>
			<name>date</name>
			<type>datetime</type>
			<required>Yes</required>
		<description>Date/time object</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>no</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>
	
	<!-- dE -->
	<function>
		<name>dE</name>
		<class>lucee.runtime.functions.dynamicEvaluation.DE</class>
		<description>Postpones evaluation of a string as an expression, when it is
        passed as a parameter to the IIf or Evaluate functions. Escapes
        any double quotation marks in the parameter and wraps the
        result in double quotation marks.</description>
		<argument>
			<name>string</name>
			<type>string</type>
			<required>Yes</required>
		<description>String to evaluate, after delay</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- decimalFormat -->
	<function>
		<name>decimalFormat</name>
		<class>lucee.runtime.functions.displayFormatting.DecimalFormat</class>
		<keywords>number,string,formatting</keywords>
		<description>Converts a number to a decimal-formatted string.</description>
		<argument>
			<name>number</name>
			<type>any</type>
			<required>Yes</required>
		<description>Number to format</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- decrementValue -->
	<function>
		<name>decrementValue</name>
		<class>lucee.runtime.functions.math.DecrementValue</class>
		<status>deprecated</status>
		<description>this function is deprecated, use instead the -- operator;Decrements the current number by one</description>
		<argument>
			<name>number</name>
			<type>number</type>
			<required>Yes</required>
		<description>Number to decrement</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>

	<!-- dollarFormat -->
	<function>
		<name>dollarFormat</name>
		<class>lucee.runtime.functions.displayFormatting.DollarFormat</class>
		<keywords>currency,string,formatting</keywords>
		<description>Formats a string in U.S. format. (For other currencies, use
        LSCurrencyFormat)</description>
		<argument>
			<name>number</name>
			<type>string</type>
			<required>Yes</required>
		<description>Number to format</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- cfusion_encrypt -->
	<function>
		<name>cfusion_encrypt</name>
		<class>lucee.runtime.functions.other.CFusionEncrypt</class>
		<description>Encrypts the given string, alias for function call encrypt(string,key,"cfmx_compat","hex")</description>
		<argument>
			<name>string</name>
			<type>string</type>
			<required>Yes</required>
		<description>string to encrypt</description>
    </argument>
		<argument>
			<name>key</name>
			<type>string</type>
			<required>yes</required>
		<description>key to use for encryption</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>

	<!-- cfusion_decrypt -->
	<function>
		<name>cfusion_decrypt</name>
		<class>lucee.runtime.functions.other.CFusionDecrypt</class>
		<description>Decrypts the given string, alias for function call decrypt(string,key,"cfmx_compat","hex")</description>
		<argument>
			<name>string</name>
			<type>string</type>
			<required>Yes</required>
		<description>string to decrypt</description>
    </argument>
		<argument>
			<name>key</name>
			<type>string</type>
			<required>yes</required>
		<description>key to use for decryption</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- GetApplicationMetadata -->
	<function>
		<name>GetApplicationMetadata</name>
		<class>lucee.runtime.functions.system.GetApplicationMetadata</class>
		<description>return all data from this scope, when using a application.cfc or all setting defined in tag cfapplication</description>
		<return>
			<type>struct</type>
		</return>
	</function>
	
	<!-- GetPrinterList -->
	<function>
		<name>GetPrinterList</name>
		<class>lucee.runtime.functions.system.GetPrinterList</class>
		<description>Gets a string list of available printers.</description>
		<argument>
			<name>delimiters</name>
			<alias>delimiter</alias>
			<type>string</type>
			<required>No</required>
			<default>,</default>
			<description>Characters that separate list elements. The default value is comma.</description>
		</argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- GetUserRoles -->
	<function>
		<name>GetUserRoles</name>
		<class>lucee.runtime.functions.system.GetUserRoles</class>
		<description>Retrieves the list of roles for the current user.</description>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- getK2ServerDocCount (Deprecated) -->
	<function>
		<name>getK2ServerDocCount</name>
		<class>lucee.runtime.functions.other.GetK2ServerDocCount</class>
		<status>deprecated</status>
		<description>This function is deprecated. </description>
		<return>
			<type>number</type>
		</return>
	</function>
	
	<!-- getK2ServerDocCountLimit (Deprecated) -->
	<function>
		<name>getK2ServerDocCountLimit</name>
		<class>lucee.runtime.functions.other.GetK2ServerDocCountLimit</class>
		<status>deprecated</status>
		<description>This function is deprecated.</description>
		<return>
			<type>number</type>
		</return>
	</function>
	
	<!-- hash40 -->
	<function>
		<name>hash40</name>
		<class>lucee.runtime.functions.string.Hash40</class>
		<description>This function only exists for backward compstibility to Lucee 4.0 or older version that has produced a incorrect result for non us-ascii caharacters,
		Only use this function for backward compatibility.
		
		Converts a variable-length string to a 32-byte, hexadecimal
        string, using the MD5 algorithm. (It is not possible to convert
        the hash result back to the source string.)
        32-byte, hexadecimal string</description>
		<argument>
			<name>input</name>
			<type>any</type>
			<required>Yes</required>
		<description>String to hash.</description>
    </argument>
		<argument>
			<name>algorithm</name>
			<type>string</type>
			<required>No</required>
		<description>The algorithm to use to hash the string. Supported are the following algorithms:
- CFMX_COMPAT: generating a hash string using classic CFML algorithm.
- MD5: (default) Generates a 32-character, hexadecimal string, using the MD5 algorithm.
- SHA: Generates a 28-character string using the Secure Hash Standard SHA-1 algorithm specified by Nation Institute of Standards and Technology (NIST) FIPS-180-2.
- SHA-256: Generates a 44-character string using the SHA-256 algorithm specified by FIPS-180-2.
- SHA-384: Generates a 64-character string using the SHA-384 algorithm specified by FIPS-180-2.
- SHA-512: Generates an 88-character string using the SHA-1 algorithm specified by FIPS-180-2.</description>
    </argument>
		<argument>
			<name>encoding</name>
			<type>string</type>
			<required>No</required>
			<description>A string specifying the encoding to use when converting
            the string to byte data used by the hash algorithm.</description>
		</argument>
		<argument>
			<name>numIterations</name>
			<type>number</type>
			<required>No</required>
			<description>number of iterations; default is 1.</description>
		</argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- iIf -->
	<function>
		<name>iIf</name>
		<class>lucee.runtime.functions.dynamicEvaluation.IIf</class>
		<description>Evaluates a Boolean conditional dynamic expression. Depending
        on whether the expression is true or false, dynamically
        evaluates one of two string expressions and returns the result.</description>
		<argument>
			<name>condition</name>
			<type>boolean</type>
			<required>Yes</required>
		<description>An expression that can be evaluated as a Boolean.</description>
    </argument>
		<argument>
			<name>string_expression1</name>
			<type>string</type>
			<required>Yes</required>
		<description>Expression to evaluate and return if condition is true.</description>
    </argument>
		<argument>
			<name>string_expression2</name>
			<type>string</type>
			<required>Yes</required>
		<description>Expression to evaluate and return if condition is false.</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- Invoke -->
	<function>
		<name>Invoke</name>
		<class>lucee.runtime.functions.dynamicEvaluation.Invoke</class>
		<description>invokes a function/operation of the given object and if given object is a string, Lucee tries to load as component.</description>
		<argument>
			<name>object</name>
			<alias>cfcinstance,obj,value,variable</alias>
			<type>any</type>
			<required>Yes</required>
			<description>a component, struct or scope that holds a function, can also be the name of a component, in this case the component get loaded.</description>
	    </argument>
		<argument>
			<name>name</name>
			<alias>methodname,method,functionname,function</alias>
			<type>string</type>
			<required>Yes</required>
			<description>name of the function/operation</description>
	    </argument>
		<argument>
			<name>arguments</name>
			<alias>args,argumentcollection</alias>
			<type>any</type>
			<required>no</required>
			<description>arguments to pass to the function/operation</description>
	    </argument>
		
		<return>
			<type>object</type>
		</return>
	</function>
	
	<!-- isDefined -->
	<function>
		<name>isDefined</name>
		<class>lucee.runtime.functions.decision.IsDefined</class>
		<tte-class>lucee.transformer.cfml.evaluator.func.impl.IsDefined</tte-class>
		<keywords>decision</keywords>
		<status>deprecated</status>
		<description>Evaluates a string value to determine whether the variable
        named in it exists.</description>
		<argument>
			<name>variable</name>
			<type>string</type>
			<required>Yes</required>
		<description>String, enclosed in quotation marks. Name of variable to test for.</description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>
	

	<!-- incrementValue -->
	<function>
		<name>incrementValue</name>
		<class>lucee.runtime.functions.math.IncrementValue</class>
		<status>deprecated</status>
		<description>this function is deprecated, use instead the ++ operator;Increments the current number by one</description>
		<argument>
			<name>number</name>
			<type>number</type>
			<required>Yes</required>
		<description>Number to increment</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>

	<!-- isDate -->
	<function>
		<name>isDate</name>
		<class>lucee.runtime.functions.decision.IsDate</class>
		<keywords>decision,date</keywords>
		<description>Determines whether a string or Java object can be converted
        to a date/time value.</description>
		<argument>
			<name>string</name>
			<type>any</type>
			<required>Yes</required>
		<description>A string or a variable that contains one. </description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- isK2ServerABroker (Deprecated) -->
	<function>
		<name>isK2ServerABroker</name>
		<class>lucee.runtime.functions.decision.IsK2ServerABroker</class>
		<status>hidden</status>
		<description>This function is deprecated. </description>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- isK2ServerDocCountExceeded  (Deprecated)-->
	<function>
		<name>isK2ServerDocCountExceeded</name>
		<class>lucee.runtime.functions.decision.IsK2ServerDocCountExceeded</class>
			<status>hidden</status>
		<description>This function is deprecated. </description>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- isK2ServerOnline (Deprecated) -->
	<function>
		<name>isK2ServerOnline</name>
		<class>lucee.runtime.functions.decision.IsK2ServerOnline</class>
			<status>hidden</status>
		<description>This function is deprecated.</description>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- isNull -->
	<function>
		<name>isNull</name>
		<class>lucee.runtime.functions.other.IsNull</class>
		<tte-class>lucee.transformer.cfml.evaluator.func.impl.IsNull</tte-class>
		<keywords>decision</keywords>
		<description>Determines whether given object is null or not</description>
		<argument>
			<name>object</name>
			<type>any</type>
			<required>Yes</required>
		<description>Object for which you perform the null check. </description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>

	<!-- isNumeric -->
	<function>
		<name>isNumeric</name>
		<class>lucee.runtime.functions.decision.IsNumeric</class>
		<keywords>decision,number</keywords>
		<description>Determines if the object represents a numeric</description>
		<argument>
			<name>string</name>
			<type>any</type>
			<required>Yes</required>
		<description>A string or a variable that contains one. </description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>

	<!-- isNumericDate -->
	<function>
		<name>isNumericDate</name>
		<class>lucee.runtime.functions.decision.IsNumericDate</class>
		<keywords>decision,number,date</keywords>
		<description>Evaluates whether a real number is a valid representation of a
        date (date/time object).</description>
		<argument>
			<name>number</name>
			<type>any</type>
			<required>Yes</required>
		<description>A real number</description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- isUserInRole -->
	<function>
		<name>isUserInRole</name>
		<class>lucee.runtime.functions.decision.IsUserInRole</class>
		<keywords>decision</keywords>
		<description>Determines whether an authenticated user belongs to the
        specified Role.</description>
		<argument>
			<name>role_name</name>
			<alias>rolename,role,name</alias>
			<type>any</type>
			<required>Yes</required>
			<description>Name of a security role</description>
	    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>

	<!-- isUserInAnyRole -->
	<function>
		<name>isUserInAnyRole</name>
		<class>lucee.runtime.functions.decision.IsUserInAnyRole</class>
		<keywords>decision</keywords>
		<description>Determines whether an authenticated user belongs to any role in a list of roles.</description>
		<argument>
			<name>role_list</name>
			<alias>rolelist,role,list</alias>
			<type>string</type>
			<required>No</required>
			<description>A comma-delimited list of one or more roles to be tested.</description>
	    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>

	<!-- IsUserLoggedIn -->
	<function>
		<name>IsUserLoggedIn</name>
		<class>lucee.runtime.functions.decision.IsUserLoggedIn</class>
		<keywords>decision</keywords>
		<description>Determines whether a user is logged in.</description>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- lSCurrencyFormat -->
	<function>
		<name>lSCurrencyFormat</name>
		<class>lucee.runtime.functions.international.LSCurrencyFormat</class>
		<keywords>date,string,formatting</keywords>
		<description>Formats a number in a locale-specific currency format.</description>
		<argument>
			<name>number</name>
			<alias>currency_number</alias>
			<type>object</type>
			<required>Yes</required>
		<description>Currency value</description>
    </argument>
		<argument>
			<name>type</name>
			<type>string</type>
			<required>No</required>
			<default>local</default>
		<description></description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- LSDateFormat -->
	<function>
		<name>LSDateFormat</name>
		<class>lucee.runtime.functions.international.LSDateFormat</class>
		<member-name>lSDateFormat</member-name>
		<member-type>date</member-type>
		<keywords>date,string,formatting</keywords>
		<description>Formats a date string to a given output using the current sessions locale</description>
		<argument>
			<name>date</name>
			<type>any</type>
			<required>Yes</required>
		<description>date object</description>
    </argument>
		<argument>
			<name>mask</name>
			<type>string</type>
			<required>No</required>
			<default>medium</default>
		<description></description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>No</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- lSEuroCurrencyFormat -->
	<function>
		<name>lSEuroCurrencyFormat</name>
		<class>lucee.runtime.functions.international.LSEuroCurrencyFormat</class>
		<status>deprecated</status>
		<keywords>currency,string,formatting</keywords>
		<description>this funciton is just a alias for lsCurrencyFormat</description>
		<argument>
			<name>number</name>
			<alias>currency_number</alias>
			<type>object</type>
			<required>Yes</required>
			<description>Currency value</description>
		</argument>
		<argument>
			<name>type</name>
			<type>string</type>
			<default>local</default>
			<required>No</required>
			<description>
			one of the following:
			- local (the currency format used in the locale. (default) )
			- international (the international standard currency format of the locale)
			- none (the currency format used in the locale; no currency symbol)</description>
		</argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
			<description>Locale to use instead of the locale of the page when processing the function</description>
		</argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- lSIsCurrency -->
	<function>
		<name>lSIsCurrency</name>
		<class>lucee.runtime.functions.international.LSIsCurrency</class>
		<keywords>currency,string,formatting</keywords>
		<description>Determines whether a string is a valid representation of a
        currency amount in the current locale.</description>
		<argument>
			<name>number</name>
			<alias>string,currency_number</alias>
			<type>string</type>
			<required>Yes</required>
		<description>A currency string</description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
		<description></description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	
	<!-- LSIsDate -->
	<function>
		<name>LSIsDate</name>
		<class>lucee.runtime.functions.international.LSIsDate</class>
		<description>Determines whether a string is a valid representation of a
        date/time value in the current locale.</description>
		<argument>
			<name>date</name>
			<alias>string</alias>
			<type>any</type>
			<alias>date</alias>
			<required>Yes</required>
		<description>A string or a variable that contains one </description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>no</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>no</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>

	<!-- lSIsNumeric -->
	<function>
		<name>lSIsNumeric</name>
		<class>lucee.runtime.functions.international.LSIsNumeric</class>
		<description>Determines whether a string is a valid representation of a
        number in the current locale.</description>
		<argument>
			<name>number</name>
			<alias>string</alias>
			<type>string</type>
			<required>Yes</required>
		<description>A string or a variable that contains one</description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- lSNumberFormat -->
	<function>
		<name>lSNumberFormat</name>
		<class>lucee.runtime.functions.international.LSNumberFormat</class>
		<keywords>number,string,formatting</keywords>
		<description>Formats a number to the given format mask in the current locale</description>
		<argument>
			<name>number</name>
			<type>any</type>
			<required>Yes</required>
		<description>Number to format</description>
    </argument>
		<argument>
			<name>mask</name>
			<type>string</type>
			<required>No</required>
		<description></description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	<!-- lSParseCurrency -->
	<function>
		<name>lSParseCurrency</name>
		<class>lucee.runtime.functions.international.LSParseCurrency</class>
		<keywords>currency,string,parsing</keywords>
		<description>Converts a locale-specific currency string into a formatted
        number. Attempts conversion by comparing the string with each
        the three supported currency formats (none, local,
        international) and using the first that matches.</description>
		<argument>
			<name>string</name>
			<alias>currency,number</alias>
			<type>string</type>
			<required>Yes</required>
		<description>A locale-specific string</description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	<!-- lSParseDateTime -->
	<function>
		<name>lSParseDateTime</name>
		<class>lucee.runtime.functions.international.LSParseDateTime</class>
		<description>Converts a string that is a valid date/time representation in
        the current locale into a date/time object.</description>
		<argument>
			<name>date</name>
			<type>object</type>
			<required>Yes</required>
		<description>A string in a format that is readable in the current locale. </description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
			<description>Locale to use instead of the locale of the page when processing the function</description>
	    </argument>
		<argument>
			<name>timezone</name>
			<alias>timezone</alias>
			<type>string</type>
			<required>No</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
			</description>
	    </argument>
	    
		<argument>
			<name>format</name>
			<type>string</type>
			<required>No</required>
		<description>The format (Java Syntax) of the string. This string is used to parse the given date string to date time object.
		For details see: http://docs.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html</description>
    </argument>
		<return>
			<type>datetime</type>
		</return>
	</function>
	
	<!-- lSParseEuroCurrency -->
	<function>
		<name>lSParseEuroCurrency</name>
		<class>lucee.runtime.functions.international.LSParseEuroCurrency</class>
		<status>deprecated</status>
		<keywords>currency,string,parsing</keywords>
		<description>use function lsParseCurrency instead</description>
		<argument>
			<name>number</name>
			<alias>string,currency_number</alias>
			<type>string</type>
			<required>Yes</required>
		<description>Locale-specific string</description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- lSParseNumber -->
	<function>
		<name>lSParseNumber</name>
		<class>lucee.runtime.functions.international.LSParseNumber</class>
		<keywords>number,string,parsing</keywords>
		<description>Converts a string that is a valid numeric representation in
        the current locale into a formatted number.</description>
		<argument>
			<name>number</name>
			<alias>string</alias>
			<type>string</type>
			<required>Yes</required>
		<description>A string or a variable that contains one</description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>
	<!-- lSTimeFormat -->
	<function>
		<name>lSTimeFormat</name>
		<class>lucee.runtime.functions.international.LSTimeFormat</class>
		<member-name>lSTimeFormat</member-name>
		<member-type>date</member-type>
		<keywords>date,string,formatting</keywords>
		<description>Formats a time string to a given output using the current locale.</description>
		<argument>
			<name>time</name>
			<type>any</type>
			<required>Yes</required>
		<description>date object</description>
    </argument>
		<argument>
			<name>mask</name>
			<type>string</type>
			<required>No</required>
			<default>short</default>
		<description></description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>No</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- monthShortAsString -->
	<function>
		<name>monthShortAsString</name>
		<class>lucee.runtime.functions.string.MonthShortAsString</class>
		<description>Returns the string label for the given month in short format</description>
		<argument>
			<name>monthnumber</name>
			<type>number</type>
			<required>Yes</required>
			<description></description>
    	</argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
			<introduced>5.0.0.0</introduced>
			<description>Locale to use instead of the locale of the page when processing the function</description>
    	</argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- newLine -->
	<function>
		<name>newLine</name>
		<class>lucee.runtime.functions.string.NewLine</class>
		<description>returns a new line</description>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- nowServer -->
	<function>
		<name>nowServer</name>
		<class>lucee.runtime.functions.dateTime.NowServer</class>
		<status>deprecated</status>
		<description>this function is deprecated, returns the current time on the server independend on lucee timezone definition</description>
		<return>
			<type>datetime</type>
		</return>
	</function>

	<!-- numberFormat -->
	<function>
		<name>numberFormat</name>
		<class>lucee.runtime.functions.displayFormatting.NumberFormat</class>
		<keywords>number,string,formatting</keywords>
		<description>Creates a custom-formatted number value. For international
        number formatting use LSNumberFormat.
        [mask - quicky]
        _,9 Digit placeholder; . decimal point; 0 Pads with zeros;
        ( ) less than zero, puts parentheses around the mask
        + plus sign before positive number minus before negative
        - a space before positive minus sign before negative
        , Separates every third decimal place with a comma.
        L,C Left-justifies or center-justifies number
        $ dollar sign before formatted number.
        ^ Separates left and right formatting.</description>
		<argument>
			<name>number</name>
			<type>any</type>
			<required>Yes</required>
		<description>A number.</description>
    </argument>
		<argument>
			<name>mask</name>
			<type>string</type>
			<required>No</required>
		<description></description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- nullValue -->
	<function>
		<name>nullValue</name>
		<class>lucee.runtime.functions.other.NullValue</class>
		<description>returns null</description>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- pagePoolClear -->
	<function>
		<name>pagePoolClear</name>
		<class>lucee.runtime.functions.system.PagePoolClear</class>
		<description>clear pages in pools</description>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- pagePoolList -->
	<function>
		<name>pagePoolList</name>
		<class>lucee.runtime.functions.system.PagePoolList</class>
		<description>list all pages in pools</description>
		<return>
			<type>array</type>
		</return>
	</function>
	
	<!-- parameterExists -->
	<function>
		<name>parameterExists</name>
		<class>lucee.runtime.functions.other.ParameterExists</class>
		<description>Determines if the parameter exists</description>
		<argument>
			<name>parameter</name>
			<type>variablestring</type>
			<required>Yes</required>
		<description></description>
    </argument>
		<return>
			<type>boolean</type>
		</return>
	</function>
	<!-- parseDateTime -->
	<function>
		<name>parseDateTime</name>
		<class>lucee.runtime.functions.string.ParseDateTime</class>
		<keywords>date,string,parsing</keywords>
		<description>Parses a date/time string according to the English (U.S.)
        locale conventions. (To format a date/time string for other
        locales, use the LSParseDateTime function.)</description>
        <member-name>parseDateTime</member-name>
        <member-type>string</member-type>
		<argument>
			<name>date</name>
			<type>object</type>
			<required>Yes</required>
			<description>A string containing a date/time value formatted according to U.S. locale conventions.</description>
    	</argument>
		<argument>
			<name>popConversion</name>
			<type>string</type>
			<required>No</required>
			<description></description>
    	</argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>No</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>datetime</type>
		</return>
	</function>
	
	<!-- parseNumber -->
	<function>
		<name>parseNumber</name>
		<class>lucee.runtime.functions.string.ParseNumber</class>
		<description>
		Parses the string argument as a numeric value. 
		</description>
		<argument>
			<name>number</name>
			<type>string</type>
			<required>Yes</required>
			<description>
			the String containing the numeric representation to be parsed
			</description>
		</argument>
		<argument>
			<name>radix</name>
			<type>string</type>
			<required>No</required>
			<description>
			the radix to be used while parsing (bin,oct,dec,hex)
			</description>
		</argument>
		<return>
			<type>number</type>
		</return>
	</function>
	
	<!-- preserveSingleQuotes -->
	<function>
		<name>preserveSingleQuotes</name>
		<class>lucee.runtime.functions.other.PreserveSingleQuotes</class>
		<description>Returns back string without letting the engine escape the single quotes. Used within CFQUERY blocks usually</description>
		<argument>
			<name>string</name>
			<type>string</type>
			<required>Yes</required>
		<description>Variable that contains a string in which to preserve single-quotation marks.</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- QueryConvertForGrid -->
	<function>
		<name>QueryConvertForGrid</name>
		<class>lucee.runtime.functions.query.QueryConvertForGrid</class>
		<status>deprecated</status>
		<keywords>query</keywords>
		<description>Use instead the function QuerySlice. Converts query data to a structure that contains a paged subset of the query.</description>
		<argument>
			<name>query</name>
			<type>query</type>
			<required>Yes</required>
		<description>Name of the query whose data is returned.</description>
    </argument>	
		<argument>
			<name>page</name>
			<type>number</type>
			<required>Yes</required>
		<description></description>
    </argument>		
		<argument>
			<name>pageSize</name>
			<type>number</type>
			<required>Yes</required>
		<description></description>
    </argument>	
		<return>
			<type>struct</type>
		</return>
	</function>
	
	<!-- rand -->
	<function>
		<name>rand</name>
		<class>lucee.runtime.functions.math.Rand</class>
		<keywords>number</keywords>
		<description>Generates a pseudo-random number in the range 0 - 1.</description>
		<argument>
			<name>algorithm</name>
			<type>string</type>
			<required>No</required>
		<description>The algorithm to use to generate the random number.</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>
	
	<!-- sizeOf -->
	<function>
		<name>sizeOf</name>
		<class>lucee.runtime.functions.system.SizeOf</class>
		<description>this function is experimentell, to not use in productive enviroment. this function returns the size in bytes of a given object.</description>
		<argument>
			<name>obj</name>
			<type>object</type>
			<required>Yes</required>
			<description>object to get size for</description>
	    </argument>
	    <argument>
			<name>complex</name>
			<type>boolean</type>
			<required>No</required>
			<description>if set to false, the size is returned, if set to true a struct containing the element count and the size is returned</description>
	    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- spanExcluding -->
	<function>
		<name>spanExcluding</name>
		<class>lucee.runtime.functions.string.SpanExcluding</class>
		<member-name>spanExcluding</member-name>
		<keywords>string</keywords>
		<description>Gets characters from a string, from the beginning to a
        character that is in a specified set of characters. The
        search is case-sensitive.</description>
		<argument>
			<name>string</name>
			<type>string</type>
			<required>Yes</required>
		<description>A string or a variable that contains one</description>
    </argument>
		<argument>
			<name>set</name>
			<type>string</type>
			<required>Yes</required>
		<description>A string or a variable that contains a set of characters.
            Must contain one or more characters</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>

	<!-- spanIncluding -->
	<function>
		<name>spanIncluding</name>
		<class>lucee.runtime.functions.string.SpanIncluding</class>
		<member-name>spanIncluding</member-name>
		<keywords>string</keywords>
		<description>Gets characters from a string, from the beginning to a
        character that is not in a specified set of characters. The
        search is case-sensitive.</description>
		<argument>
			<name>string</name>
			<type>string</type>
			<required>Yes</required>
		<description>A string or a variable that contains the search string.</description>
    </argument>
		<argument>
			<name>set</name>
			<type>string</type>
			<required>Yes</required>
		<description>A string or a variable that contains a set of characters.
            Must contain one or more characters</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- struct -->
	<function>
		<name>struct</name>
		<class>lucee.runtime.functions.struct.Struct_</class>
		<status>hidden</status>
		<description>used to create and populate a struct at the same time, example struct(key1:1,key2:2)</description>
		<argument-type>dynamic</argument-type>
		<return>
			<type>struct</type>
		</return>
	</function>
	
	<!-- SystemCacheClear -->
	<function>
		<name>SystemCacheClear</name>
		<class>lucee.runtime.functions.system.SystemCacheClear</class>
		<description>clears all caches or the specified cache</description>
		<argument>
			<name>cacheName</name>
			<alias>cache,region</alias>
			<type>string</type>
			<required>No</required>
		<description>Name of the cache to clear, if not defined all caches will be cleared:
      the following cache Names are supported:
      - all: clear all caches
      - template: clears the template cache
      - component: clears the component path cache
      - customtag: clears the custom tag path cache
      - query: clears the query cache
      - tag: clears the cfml/cfc based built in tag cache
      - function: clears the cfml based built in function cache
		</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	<!-- timeFormat -->
	<function>
		<name>timeFormat</name>
		<member-name>timeFormat</member-name>
        <member-type>date</member-type>
        
		<class>lucee.runtime.functions.displayFormatting.TimeFormat</class>
		<keywords>date,string,formatting</keywords>
		<description>Formats a time string to a given output</description>
		<argument>
			<name>time</name>
			<type>any</type>
			<required>Yes</required>
		<description>A date/time value or string to convert</description>
    </argument>
		<argument>
			<name>mask</name>
			<type>string</type>
			<required>No</required>
			<default>hh:mm tt</default>
		<description>
Characters that show how Lucee displays a time:
- h: hours; no leading zero for single-digit hours (12-hour clock)
- hh: hours; leading zero for single-digit hours (12-hour clock)
- H: hours; no leading zero for single-digit hours (24-hour clock)
- HH: hours; leading zero for single-digit hours (24-hour clock)
- m: minutes; no leading zero for single-digit minutes
- mm: minutes; a leading zero for single-digit minutes
- s: seconds; no leading zero for single-digit seconds
- ss: seconds; leading zero for single-digit seconds
- l or L: milliseconds, with no leading zeros
- t: one-character time marker string, such as A or P
- tt: multiple-character time marker string, such as AM or PM
- z: Time zone in literal format, for example, IST
- Z: Time zone in hours of offset (RFC 822 TimeZone), for example, +0530
- X: Time zone in hours of offset in ISO 8601 format. The following are the three ways of using 'X':
         X: +05
         XX: +0530
         XXX: +5:30

- short: equivalent to h:mm tt
- medium: equivalent to h:mm:ss tt
- long: equivalent to h:mm:ss tt {timezone-3-letters}
- full: equivalent to h:mm:ss tt {timezone-3-letters}
		
		</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>No</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- uRLEncodedFormat -->
	<function>
		<name>uRLEncodedFormat</name>
		<class>lucee.runtime.functions.other.URLEncodedFormat</class>
		<member-name>uRLEncodedFormat</member-name>
		<keywords>string,formatting</keywords>
		<description>Generates a URL-encoded string. For example, it replaces spaces
        with %20, and non-alphanumeric characters with equivalent
        hexadecimal escape sequences. Passes arbitrary strings within a
        URL.</description>
		<argument>
			<name>string</name>
			<type>string</type>
			<required>Yes</required>
		<description>A string or a variable that contains one</description>
    </argument>
		<argument>
			<name>charset</name>
			<type>string</type>
			<required>No</required>
			<default>utf-8</default>
		<description>The character encoding in which the string is encoded.</description>
    </argument>
		<argument>
			<name>force</name>
			<type>boolean</type>
			<required>No</required>
			<default>true</default>
		<description></description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- valueArray -->
	<function>
		<name>valueArray</name>
		<class>lucee.runtime.functions.query.ValueArray</class>
		<tte-class>lucee.transformer.cfml.evaluator.func.impl.ValueArray</tte-class>
		<status>deprecated</status>
		<keywords>query</keywords>
		<description>Returns a array of all the values, for a given column within the query.
		this function is deprecated, use instead the function queryColumnData</description>
		<argument>
			<name>query_column</name>
			<type>queryColumn</type>
			<required>Yes</required>
		<description></description>
    </argument>
		<return>
			<type>array</type>
		</return>
	</function>
	
	<!-- valueList -->
	<function>
		<name>valueList</name>
		<class>lucee.runtime.functions.query.ValueList</class>
		<!-- <tte-class>lucee.transformer.cfml.evaluator.func.impl.ValueList</tte-class> -->
		<status>deprecated</status>
		<keywords>query</keywords>
		<description>Returns a list of all the values, for a given column within the query, delimited by the value given.
		this function is deprecated, use instead the function queryColumnData</description>
		<argument>
			<name>query_column</name>
			<type>queryColumn</type>
			<required>Yes</required>
		<description>Name of an executed query and column. Separate query name and column name with a period.</description>
    </argument>
		<argument>
			<name>delimiter</name>
			<alias>delimiters</alias>
			<type>string</type>
			<required>No</required>
			<default>,</default>
		<description>A delimiter character to separate column data items.
            Default: comma (,).</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- valueList (Member) -->
	<function>
		<name>_valueList</name>
		<class>lucee.runtime.functions.query.ValueListMember</class>
		<member-name>valueList</member-name>
		<status>hidden</status>
		<keywords>query</keywords>
		<description>Returns a list of all the values, for a given column within the query, delimited by the value given.</description>
		<argument>
			<name>query</name>
			<type>query</type>
			<required>Yes</required>
			<description>query object do get data from</description>
	    </argument>	
		<argument>
			<name>columnName</name>
			<type>string</type>
			<required>Yes</required>
			<description>name of the column returned</description>
	    </argument>	
		<argument>
			<name>delimiter</name>
			<alias>delimiters</alias>
			<type>string</type>
			<required>No</required>
			<default>,</default>
		<description>A delimiter character to separate column data items.
            Default: comma (,).</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- VerifyClient -->
	<function>
		<name>VerifyClient</name>
		<class>lucee.runtime.functions.other.VerifyClient</class>
		<description>Verifies whether request is from valid client or not</description>
		<return>
			<type>void</type>
		</return>
	</function>
	
	
	<!-- week -->
	<function>
		<name>week</name>
		<class>lucee.runtime.functions.dateTime.Week</class>
		<member-name>week</member-name>
		<description>From a date/time object, determines the week number within
        the year. An integer in the range 1-53; the ordinal of the
        week, within the year.</description>
		<argument>
			<name>date</name>
			<type>datetime</type>
			<required>Yes</required>
		<description>date object</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>no</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>
	
	<!-- lsweek -->
	<function>
		<name>lsweek</name>
		<class>lucee.runtime.functions.international.LSWeek</class>
		<description>Returns the week number in the year of the date referenced, based on the loal influence. not everywhere the wekk begins on Monday by defintion.</description>
		<argument>
			<name>date</name>
			<type>datetime</type>
			<required>Yes</required>
		<description></description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>no</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>no</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>number</type>
		</return>
	</function>
	
	<!-- writeOutput -->
	<function>
		<name>writeOutput</name>
		<class>lucee.runtime.functions.other.WriteOutput</class>
		<description>Writes the given string to the main response buffer regardless of
        conditions established by the cfsetting tag.</description>
		<argument>
			<name>string</name>
			<type>string</type>
			<required>Yes</required>
		<description>A string to write to the buffer.</description>
    </argument>
    <argument>
			<name>encodeFor</name>
			<type>string</type>
			<required>no</required>
			<description>encode for what, valid values are:
- css: for output inside Cascading Style Sheets (CSS)
- dn: for output in LDAP Distinguished Names
- html: for output inside HTML
- html_attr: for output inside HTML Attributes
- javascript: for output inside Javascript
- ldap: for output in LDAP queries
- url: for output in URL
- vbscript: for output inside vbscript
- xml: for output inside XML
- xml_attr: for output inside XML Attributes
- xpath: for output in XPath</description>
	    </argument>
    
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- yesNoFormat -->
	<function>
		<name>yesNoFormat</name>
		<class>lucee.runtime.functions.displayFormatting.YesNoFormat</class>
		<member-name>yesNoFormat</member-name>
		<member-type>boolean</member-type>
		<keywords>boolean,formatting</keywords>
		<description>Yes, for a non-zero value; No, otherwise.</description>
		<argument>
			<name>value</name>
			<type>any</type>
			<required>Yes</required>
			<description>a value that can be casted to a boolean</description>
		</argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- trueFalseFormat -->
	<function>
		<name>trueFalseFormat</name>
		<class>lucee.runtime.functions.displayFormatting.TrueFalseFormat</class>
		<keywords>boolean,formatting</keywords>
		<description>True, for a non-zero value; False, otherwise.</description>
		<argument>
			<name>value</name>
			<type>any</type>
			<required>Yes</required>
			<description>a value that can be casted to a boolean</description>
		</argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- booleanFormat -->
	<function>
		<name>booleanFormat</name>
		<class>lucee.runtime.functions.displayFormatting.TrueFalseFormat</class>
		<member-name>booleanFormat</member-name>
        <member-type>boolean</member-type>
        <keywords>boolean,formatting</keywords>
		<description>True, for a non-zero value; False, otherwise.</description>
		<argument>
			<name>value</name>
			<type>any</type>
			<required>Yes</required>
			<description>a value that can be casted to a boolean</description>
		</argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
		<!-- unserializeJava 
	deprecated replaced with evaluteJava
	-->
	<function>
		<name>unserializeJava</name>
		<class>lucee.runtime.functions.dynamicEvaluation.UnserializeJava</class>
		<status>deprecated</status>
		<description>literal defintion of a serialized Java Object by function serialize</description>
		<argument>
			<name>string</name>
			<type>string</type>
			<required>Yes</required>
		<description></description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- quotedValueList -->
	<function>
		<name>quotedValueList</name>
		<class>lucee.runtime.functions.other.QuotedValueList</class>
		<status>deprecated</status>
		<description>Returns a quoted list of all the values, for a given column within the query, delimited by the value given.
		this function is deprecated, use instead the function queryColumnData</description>
		<argument>
			<name>query_column</name>
			<type>queryColumn</type>
			<required>Yes</required>
		<description>Name of an executed query and column. Separate query name and column name with a period.</description>
    </argument>
		<argument>
			<name>delimiter</name>
			<alias>delimiters</alias>
			<type>string</type>
			<required>No</required>
			<default>,</default>
		<description></description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- QueryGetRow -->
    	<function>
    		<name>QueryGetRow</name>
    		<class>lucee.runtime.functions.query.QueryRowData</class>
    		<member-name>getRow</member-name>
    		<keywords>query</keywords>
			<status>deprecated</status>
			<description>this function is deprecated, use function QueryRowData instead.</description>
	
    		<argument>
    			<name>query</name>
    			<type>query</type>
    			<required>Yes</required>
    			<description>query object do get data from</description>
    	    </argument>
    		<argument>
    			<name>rowNumber</name>
    			<type>number</type>
    			<required>Yes</required>
    			<description>position of the row to be returned</description>
    	    </argument>
    		<return>
    			<type>struct</type>
    		</return>
    	</function>
    	
    <!-- listTrim -->
	<function>
		<name>listTrim</name>
		<class>lucee.runtime.functions.list.ListTrim</class>
		<status>deprecated</status>
		<keywords>list,string</keywords>
		<description>this function is deprecated, use instead ListCompact</description>
		<argument>
			<name>list</name>
			<type>string</type>
			<required>Yes</required>
			<description>a string list</description>
		</argument>
		<argument>
			<name>delimiters</name>
			<alias>delimiter</alias>
			<type>string</type>
			<required>No</required>
			<default>,</default>
			<description>Characters that separate list elements. The default value is comma.</description>
		</argument>
		<return>
			<type>string</type>
		</return>
	</function>
	
	<!-- ImageDrawImage -->
	<function>
		<name>ImageDrawImage</name>
		<class>lucee.runtime.functions.image.ImageDrawImage</class>
		<status>deprecated</status>
		<keywords>image</keywords>
		<description>this function is deprecated, use ImagePaste instead. Draws a image on a image with the baseline of the first character positioned at (x,y) in the image.</description>
		<argument>
			<name>name</name>
			<type>any</type>
			<required>Yes</required>
		<description>the image to draw on it</description>
    </argument>
		<argument>
			<name>image</name>
			<type>any</type>
			<required>Yes</required>
		<description>the image to draw</description>
    </argument>
		<argument>
			<name>x</name>
			<type>number</type>
			<required>Yes</required>
		<description>The x coordinate of the of the top left corner of the image to draw.</description>
    </argument>
		<argument>
			<name>y</name>
			<type>number</type>
			<required>Yes</required>
		<description>The y coordinate of the of the top left corner of the image to draw.</description>
    </argument>
		<return>
			<type>void</type>
		</return>
	</function>
	
	<!-- getMetricData -->
	<function>
		<name>getMetricData</name>
		<class>lucee.runtime.functions.system.GetMetricData</class>
		<status>deprecated</status>
		<description>Gets server performance metrics.</description>
		<argument>
			<name>monitor_name</name>
			<type>string</type>
			<required>Yes</required>
		<description>name of the monitor</description>
    </argument>
		<return>
			<type>any</type>
		</return>
	</function>
	
	<!-- Empty -->
	<function>
		<name>Empty</name>
		<class>lucee.runtime.functions.system.Empty</class>
		<status>deprecated</status>
		<description>this function is deprcated, use instead "IsEmpty".
		this function returns true if a value exists and is not "empty". 
The following things are considered to be empty:
- string:"" (an empty string)
- number:return always false
- boolean: return always false
- array: [] (an empty array)
- struct: {} (an empty struct)
		 </description>
		<argument>
			<name>variable</name>
			<alias>variableName,object</alias>
			<type>variablestring</type>
			<required>Yes</required>
			<description></description>
    	</argument>
		<return>
			<type>boolean</type>
		</return>
	</function>

    <!-- CacheRegionExists -->
    <function>
        <name>CacheRegionExists</name>
        <class>lucee.runtime.functions.cache.CacheRegionExists</class>
        <status>deprecated</status>
        <introduced>5.0.0.0</introduced>
		<description>this function exists solely for the purpose of compatibility with other CFML Engines.  we strongly recommend not to use this function.
        it is recommended to use the Administrator interface in order to add or remove cache connections.

        this functions returns true if a cache connection with the passed cacheName exists.</description>
        <argument>
            <name>cacheName</name>
            <alias>cache,region</alias>
            <type>string</type>
            <required>yes</required>
            <description>the name of the cache connection to check (also known as Region in other CFML engines).</description>
        </argument>
        <argument>
            <name>password</name>
            <alias>webAdminPassword</alias>
            <type>string</type>
            <required>No</required>
            <description>the password for the web administrator is required to interact with Cache Connections.
            you can optionally set it for your Application in Application.cfc using the variable [this.webAdminPassword].</description>
        </argument>
        <return>
            <type>boolean</type>
        </return>
    </function>

    <!-- CacheRegionRemove -->
    <function>
        <name>CacheRegionRemove</name>
        <class>lucee.runtime.functions.cache.CacheRegionRemove</class>
        <status>deprecated</status>
        <introduced>5.0.0.0</introduced>
		<description>this function exists solely for the purpose of compatibility with other CFML Engines.  we strongly recommend not to use this function.
        it is recommended to use the Administrator interface in order to remove a cache connection.</description>
        <argument>
            <name>cacheName</name>
            <alias>cache,region</alias>
            <type>string</type>
            <required>yes</required>
            <description>the name of the cache connection to remove (also known as Region in other CFML engines).</description>
        </argument>
        <argument>
            <name>password</name>
            <alias>webAdminPassword</alias>
            <type>string</type>
            <required>no</required>
            <description>the password for the web administrator is required to interact with Cache Connections.
            you can optionally set it for your Application in Application.cfc using the variable [this.webAdminPassword].</description>
        </argument>
        <return>
            <type>void</type>
        </return>
    </function>

    <!-- CacheRegionNew -->
    <function>
        <name>CacheRegionNew</name>
        <class>lucee.runtime.functions.cache.CacheRegionNew</class>
        <status>deprecated</status>
        <introduced>5.0.0.0</introduced>
		<description>this function exists solely for the purpose of compatibility with other CFML Engines.  we strongly recommend not to use this function.
        to create a cache connection either declare it in your Application.cfc or create it via the in the Administrator interface.</description>
        <argument>
            <name>cacheName</name>
            <alias>cache,region</alias>
            <type>string</type>
            <required>yes</required>
            <description>the name of the cache connection to create (also known as Region in other CFML engines).</description>
        </argument>
        <argument>
            <name>properties</name>
            <alias>propsSruct,props</alias>
            <type>any</type>
            <required>no</required>
            <description>a structure specifying the cache properties</description>
        </argument>
        <argument>
            <name>throwOnError</name>
            <type>any</type>
            <required>no</required>
            <description>specifies whether the function should throw an exception if a cache connection with that name already exists (default is true)</description>
        </argument>
        <argument>
            <name>password</name>
            <alias>webAdminPassword</alias>
            <type>string</type>
            <required>no</required>
            <description>the password for the web administrator is required to interact with Cache Connections.
            you can optionally set it for your Application in Application.cfc using the variable [this.webAdminPassword].</description>
        </argument>
        <return>
            <type>void</type>
        </return>
    </function>
	
	<!-- CacheKeyExists -->
	<function>
		<name>CacheKeyExists</name>
		<class>lucee.runtime.functions.cache.CacheKeyExists</class>
		<status>deprecated</status>
		<description>this function is deprecated, use instead CacheIdExists. Returns true/false whether the cache contains an element with the certain keyname.</description>
		<argument>
			<name>key</name>
			<alias>name,id</alias>
			<type>string</type>
			<required>yes</required>
			<description>key to check</description>
		</argument>
		<argument>
			<name>cacheName</name>
			<alias>cache,region</alias>
			<type>string</type>
			<required>No</required>
			<description>definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.</description>
		</argument>
		<return>
			<type>boolean</type>
		</return>
	</function>
	
	<!-- CacheRemoveAll -->
	<function>
		<name>CacheRemoveAll</name>
		<class>lucee.runtime.functions.cache.CacheRemoveAll</class>
		<status>deprecated</status>
		<description>this function is deprecated, use instead cacheClear. Removes all elements from the cache</description>
		<argument>
			<name>cacheName</name>
			<alias>cache,region</alias>
			<type>string</type>
			<required>No</required>
			<description>definition of the cache used by name, when not set the "default Object Cache" defined in Lucee Administrator is used instead.</description>
		</argument>
		<return>
			<type>number</type>
		</return>
	</function>
	<!-- lSDateTimeFormat -->
	<function>
		<name>lSDateTimeFormat</name>
		<class>lucee.runtime.functions.international.LSDateTimeFormat</class>
		<member-name>lSDateTimeFormat</member-name>
		<member-type>date</member-type>
		<keywords>date,string,formatting</keywords>
		<description>Formats a date string to a given output using the current locale</description>
		<argument>
			<name>date</name>
			<type>any</type>
			<required>Yes</required>
		<description>date object</description>
    </argument>
		<argument>
			<name>mask</name>
			<type>string</type>
			<required>No</required>
			<default>dd-MMM-yyyy HH:nn:ss</default>
		<description>
		Mask that has to be used for formatting. The function follows Java date time mask. For details, see the section Date and Time Patterns at the following URL: http://docs.oracle.com/javase/1.4.2/docs/api/java/text/SimpleDateFormat.html
		</description>
    </argument>
		<argument>
			<name>locale</name>
			<type>locale</type>
			<required>No</required>
		<description>Locale to use instead of the locale of the page when processing the function</description>
    </argument>
		<argument>
			<name>timezone</name>
			<type>timezone</type>
			<required>No</required>
		<description>
A datetime object is independent of a specific timezone, it is only a offset in milliseconds from 1970-1-1 00.00:00 UTC (Coordinated Universal Time).
This means that the timezone only comes into play when you need specific information like hours in a day, minutes in a hour or which day it is since those calculations depend on the timezone.
For these calculations, a timezone must be specified in order to translate the date object to something else. If you do not provide the timezone in the function call, it will default to the timezone specified in the Lucee Administrator (Settings/Regional), or the timezone specified for the current request using the function setTimezone.
You can find a list of all available timezones in the Lucee administrator (Settings/Regional). Some examples of valid timezones:
       - AGT (for time in Argentina)
       - Europe/Zurich (for time in Zurich/Switzerland)
       - HST (Hawaiian Standard Time in the USA)
		</description>
    </argument>
		<return>
			<type>string</type>
		</return>
	</function>
</func-lib>