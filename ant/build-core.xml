<?xml version="1.0" encoding="UTF-8"?>
<project default="susi" basedir="${rootDir}" name="LuceeCore" ><!-- TODO maybe there is a better way for this -->
  <description>
        Build Lucee Core
  </description>
  

  <property name="build.compiler" value="extJavac"/>
  <property name="agent" value="lucee.runtime.instrumentation.ExternalAgent"/>
  <property name="bundleName" value="Lucee Core"/>
  <property name="bundleSymbolicName" value="lucee.core"/>
  
  <property name="testboxVersion" value="2.2.0"/>
  <property name="testboxURL" 
    value="http://downloads.ortussolutions.com/ortussolutions/testbox/${testboxVersion}/testbox-${testboxVersion}.zip"/>
  <property name="extURL" value="http://extension.lucee.org/rest/extension/provider/full/"/>
  
  <property name="extLucene"      value="EFDEB172-F52E-4D84-9CD1A1F561B3DFC8"/>
  <property name="extHibernate"   value="FAD1E8CB-4F45-4184-86359145767C29DE"/>
  <property name="extPDF"         value="66E312DD-D083-27C0-64189D16753FD6F0"/>
  <property name="extS3"          value="17AB52DE-B300-A94B-E058BD978511E39E"/>
  <property name="extChart"       value="D46B46A9-A0E3-44E1-D972A04AC3A8DC10"/>

  <!-- DB drivers -->
  <property name="extMySQL"       value="7E673D15-D87C-41A6-8B5F1956528C605F"/>
  <property name="extMSSQL"       value="99A4EF8D-F2FD-40C8-8FB8C2E67A4EEEB6"/>
  <property name="extPostgreSQL"  value="671B01B8-B3B3-42B9-AC055A356BED5281"/>
  <property name="extJDTsSQL"     value="2BCD080F-4E1E-48F5-BEFE794232A21AF6"/>
  <property name="extH2"          value="465E1E35-2425-4F4E-8B3FAB638BD7280A"/>

  <!-- admin and doc -->
  <property name="extAdmin"       value="CED6227E-0F49-6367-A68D21AACA6B07E8"/>
  <property name="extDoc"         value="D46D49C3-EB85-8D97-30BEC2F38561E985"/>

  
  <!-- http://www.coldbox.org/download/testbox -->
  <tstamp>
      <format property="NOW" pattern="yyyy/MM/dd HH:mm:ss z" locale="en,GB"/>
  </tstamp>

  <macrodef name="echots">
    <attribute name="message"/>
    <sequential>
      <local name="timestamp" />
      <tstamp>
        <format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
      </tstamp>
      <echo message="---------- ${timestamp} - @{message} ----------" />
    </sequential>
  </macrodef>

  <scriptdef name="unwrap" language="javascript">
     <attribute name="text" />
     <attribute name="property" />
     <![CDATA[
      var text = attributes.get("text");
      text=text.trim();
      if(text.startsWith('"') && text.endsWith('"')) {
        text=text.substring(1,text.length()-1);
      }
      project.setProperty(attributes.get("property"), text);
     ]]>
  </scriptdef>

  <scriptdef name="updatedate" language="javascript">
     <attribute name="text" />
     <attribute name="date" />
     <attribute name="property" />
     <![CDATA[
      var text = attributes.get("text");
      var date = attributes.get("date");
      
      var index=text.indexOf("lucee.core.release.date");
      if(index!=-1) {
        var start=text.indexOf('"',index);
        var end=text.indexOf('"',start+1);
        if(start!=-1 && end!=-1) {
          text=text.substring(0,start+1)+date+text.substring(end);
        }
      }

      project.setProperty(attributes.get("property"), text);
     ]]>
  </scriptdef>

  <scriptdef name="felix" language="javascript">
     <attribute name="property" />
     <attribute name="dependencies" />
     <attribute name="separator" />
     <![CDATA[
      var dep = attributes.get("dependencies");
      var sep = attributes.get("separator");
      var arr=dep.split(sep);
      
      var rtn="";
      for(var i=0;i<arr.length;i++){
        if(arr[i].indexOf("felix")!=-1) {
          rtn=arr[i];
          break;
        } 
      }

      var res=arr[0];
      project.setProperty(attributes.get("property"), rtn);
     ]]>
  </scriptdef>
  
  <scriptdef name="currentTime" language="javascript">
     <attribute name="property" />
     <![CDATA[
      project.setProperty(attributes.get("property"), new Date().getTime());
     ]]>
  </scriptdef>

  <scriptdef name="toFileName" language="javascript">
     <attribute name="name" />
     <attribute name="version" />
     <attribute name="property" />
     <![CDATA[
      var name = attributes.get("name").trim();
      var version = attributes.get("version").trim();
      
      var needle = ' ';
      //var regex = new RegExp(needle,'g');
      var repl = '-';
      
      // removes quotes
      if(name.startsWith('"') && name.endsWith('"')) {
        name=name.substring(1,name.length()-1).trim();
      }

      // remove brackets
      var start,end;
      while((start=name.indexOf('('))!=-1) {
        end=name.indexOf(')',start+1);
        if(end==-1) break;
        name=(name.substring(0,start) + name.substring(end+1)).trim();
      }

      // version
      if(version.startsWith('"') && version.endsWith('"')) {
        version=version.substring(1,version.length()-1).trim();
      }

      name=name.trim();
      name=name.replace(" ","-").toLowerCase();
      name=name.replace(" ","-"); // TODO make better but not with regex some ant version will fail
      name=name.replace(" ","-");
      name=name.replace(" ","-");
      name=name.replace(" ","-");
      name=name.replace(" ","-");

      project.setProperty(attributes.get("property"), name+"-"+version+".lex");
     ]]>
  </scriptdef>

  <target name="init">

    <property name="srcLoader" location="${rootDir}/loader/src/main/java"/>
    <property name="srcCore" location="${rootDir}/core/src/main/java"/>
    <property name="cache" location="${rootDir}/cache"/>
    <property name="trgLoader" location="${rootDir}/loader/target"/>
    <property name="trgCore" location="${rootDir}/core/target"/>
    <property name="srcCFML" location="${rootDir}/core/src/main/cfml"/>
    <property name="srcInst" location="${rootDir}/instrumentation/src/main/java"/> 
    <property name="ant" location="${rootDir}/ant"/>
    <property name="test" location="${rootDir}/test"/>
    <property name="temp" location="${rootDir}/temp"/>
    <property name="loader" location="${temp}/loader"/>
    <property name="core" location="${temp}/core"/>
    <property file="${rootDir}/build.properties"/>

<echo>
   __                     
  / / _   _  ___ ___  ___ 
 / / | | | |/ __/ _ \/ _ \
/ /__| |_| | (_|  __/  __/
\____/\__,_|\___\___|\___|

==========================
LUCEE BUILD PROCESS
==========================                   
    </echo>

    <echots message="${version}"/>
    <echots message="${name}"/>
    <echots message="${name.explanation}"/>
    <echots message="${rootDir}"/>
                    
    
    <!-- Create the time stamp -->
    <tstamp/>
    
    <delete dir="${temp}"/>
    
    <!-- Create the  directory structure needed -->
    <mkdir dir="${core}"/>
    <mkdir dir="${loader}"/>
    <mkdir dir="${temp}/agent"/>
    <mkdir dir="${cache}"/>

  </target>




    <macrodef name="loadmf">
        <attribute name="jar"/>
        <attribute name="prefix" default=""/>
        <sequential>
            <loadproperties>
                <!-- Load the manifest entries -->
                <zipentry zipfile="@{jar}" name="META-INF/MANIFEST.MF"/>
                <!-- Add the prefix -->
                <filterchain>
                    <prefixlines prefix="@{prefix}"/>
                </filterchain>
            </loadproperties>
        </sequential>
    </macrodef>

  <target name="check-cache">
      <!-- download file necessary -->

    <available file="${cache}/testbox-${testboxVersion}.zip" property="testbox.present"/>

    <available file="${cache}/${extMySQL}.lex" property="mysql.present"/>
    <available file="${cache}/${extMSSQL}.lex" property="mssql.present"/>
    <available file="${cache}/${extPostgreSQL}.lex" property="postgre.present"/>
    <available file="${cache}/${extJDTsSQL}.lex" property="jdts.present"/>

    <available file="${cache}/${extChart}.lex" property="chart.present"/>
    <available file="${cache}/${extS3}.lex" property="s3.present"/>
    <available file="${cache}/${extAdmin}.lex" property="admin.present"/>
    <available file="${cache}/${extDoc}.lex" property="doc.present"/>
  </target>


  <target name="check-mysql" depends="check-cache" unless="mysql.present">
      <get src="${extURL}${extMySQL}" dest="${cache}/${extMySQL}.lex"/>
  </target> 
  <target name="check-mssql" depends="check-cache" unless="mssql.present">
      <get src="${extURL}${extMSSQL}" dest="${cache}/${extMSSQL}.lex"/>
  </target> 
  <target name="check-postgre" depends="check-cache" unless="postgre.present">
      <get src="${extURL}${extPostgreSQL}" dest="${cache}/${extPostgreSQL}.lex"/>
  </target> 
  <target name="check-jdts" depends="check-cache" unless="jdts.present">
      <get src="${extURL}${extJDTsSQL}" dest="${cache}/${extJDTsSQL}.lex"/>
  </target>
  <target name="check-chart" depends="check-cache" unless="chart.present">
      <get src="${extURL}${extChart}" dest="${cache}/${extChart}.lex"/>
  </target>
  <target name="check-s3" depends="check-cache" unless="s3.present">
      <get src="${extURL}${extS3}" dest="${cache}/${extS3}.lex"/>
  </target>
  <target name="check-admin" depends="check-cache" unless="admin.present">
      <get src="${extURL}${extAdmin}" dest="${cache}/${extAdmin}.lex"/>
  </target>
  <target name="check-doc" depends="check-cache" unless="doc.present">
      <get src="${extURL}${extDoc}" dest="${cache}/${extDoc}.lex"/>
  </target>
  <target name="check-testbox" depends="check-cache" unless="testbox.present">
      <get src="${testboxURL}" dest="${cache}/testbox-${testboxVersion}.zip"/>
  </target> 

  <target name="check" depends="check-mysql,check-mssql,check-postgre,check-jdts,check-chart,check-s3,check-admin,check-doc,check-testbox">
    
    <mkdir dir="${temp}/loader/extensions/"/>

    <!-- testbox -->
    <copy 
      file="${cache}/testbox-${testboxVersion}.zip" 
      todir="${temp}"/>

  </target> 

  
  <target name="copyDeployFiles" depends="init,check" description="copy files from source/cfml to source/java/core/src/resource">
    <echots message="copy files from source/cfml to source/java/core/src/resource"/>
    <copy todir="${srcCore}/resource/context/">
      <fileset dir="${srcCFML}/context/">
        <include name="*.cfm"/>
        <include name="*.cfc"/>
        <include name="*.lucee"/>
        <include name="*.xml"/>
      </fileset>
    </copy>

    <copy todir="${srcCore}/resource/context/admin/resources/language/">
      <fileset dir="${srcCFML}/context/admin/resources/language/">
        <include name="*.cfm"/>
        <include name="*.cfc"/>
        <include name="*.lucee"/>
        <include name="*.xml"/>
      </fileset>
    </copy>

    <copy todir="${srcCore}/resource/context/gateway">
      <fileset dir="${srcCFML}/context/gateway">
        <include name="*.cfm"/>
        <include name="*.cfc"/>
        <include name="*.lucee"/>
        <include name="*.xml"/>
      </fileset>
    </copy>

    <copy todir="${srcCore}/resource/context/templates/error">
      <fileset dir="${srcCFML}/context/templates/error">
        <include name="*.cfm"/>
        <include name="*.cfc"/>
        <include name="*.lucee"/>
        <include name="*.xml"/>
      </fileset>
    </copy>

    <copy todir="${srcCore}/resource/context/admin/plugin">
      <fileset dir="${srcCFML}/context/admin/plugin">
        <include name="**/*.cfm"/>
        <include name="**/*.cfc"/>
        <include name="**/*.lucee"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="agent" depends="copyDeployFiles" description="create external-agent  jar used as backup when dynamic agent fails" >
    <echots message="create external-agent.jar used as backup when dynamic agent fails"/>
    
    <!-- compie the source -->
    <javac 
      srcdir="${srcInst}" 
      target="1.7" 
      destdir="${temp}/agent"
      debug="true" debuglevel="lines,vars,source" classpath="${dependencies}" encoding="utf-8">
    </javac>

    <!-- create the manifest file -->
    <jar 
        basedir="${temp}/agent" 
        jarfile="${core}/resource/lib/lucee-external-agent.jar" 
        manifest="${srcInst}/META-INF/MANIFEST.MF"/> 
    

  </target>

  <target name="_loader" depends="agent" description="compile the source" >
    <echots message="compile loader"/>
    <!-- compie the source -->
    <javac 
      srcdir="${srcLoader}" 
      target="1.7" 
      destdir="${temp}/loader"
      debug="true" debuglevel="lines,vars,source" classpath="${dependencies}" encoding="utf-8">
    </javac>
    
    <!-- copy all non java files -->
    <copy todir="${temp}/loader">
      <fileset dir="${srcLoader}">
        <exclude name="**/*.java"/>
        <exclude name=".*"/>
      </fileset>
    </copy>

    <!-- set lucee/version file -->
    <currentTime property="ct" />
    <echo file="${temp}/loader/lucee/version" message="${version}:${ct}" encoding="UTF-8"/>


  </target>


  <target name="_core" depends="_loader" description="compile the source" >
    
    <echots message="compile core"/>
    <!-- set the loader as classpath -->
    <path id="classpath">
      <pathelement location="${temp}/loader" />
      <pathelement path="${dependencies}"/>
    </path>

    <!-- <pathconvert property="classpathProp" refid="classpath"/> -->
   
    <!-- compile the core -->
    <javac 
      srcdir="${srcCore}" 
      target="1.7" 
      destdir="${core}"
      debug="true" debuglevel="lines,vars,source" encoding="utf-8">
       <classpath refid="classpath" />
    </javac>

    <!-- copy all non java files -->
    <copy todir="${core}">
      <fileset dir="${srcCore}">
        <exclude name="**/*.java"/>
        <exclude name=".*"/>
      </fileset>
    </copy>

    <!-- set date in default properties -->
    <loadfile property="defprop"
      srcFile="${core}/default.properties"/>
    <updatedate text="${defprop}" date="${NOW}" property="moddefprop" />
    <echo file="${core}/default.properties" message="${moddefprop}"/>

    <!-- create the manifest file -->
    <manifest file="${core}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Bundle-Version" value="${version}"/>
      <attribute name="Bundle-Name" value="${bundleName}"/>
      <attribute name="Bundle-SymbolicName" value="${bundleSymbolicName}"/>
      <attribute name="Bundle-ManifestVersion" value="2"/>
      <attribute name="Built-Date" value="${NOW}"/>
      <attribute name="State" value="${state}"/>
      <attribute name="Minor-Name" value="${name}"/>
      <attribute name="Minor-Name-Explanation" value="${name.explanation}"/>
    </manifest>
  </target>


  <target name="buildJars" depends="_core" description="generate temporary jars used to generate the archive" >
    
    <echots message="generate temporary jars used to generate the archive"/>
    <!-- generates a jar from the core 
          this jars are only 
    -->
    <jar 
        basedir="${core}" 
        jarfile="${temp}/loader/core/core.lco" 
        manifest="${core}/META-INF/MANIFEST.MF"/> 


    <!-- genrates the jar from the loader -->
    <jar 
      basedir="${temp}/loader" 
      jarfile="${temp}/lucee.jar" 
      manifest="${srcLoader}/META-INF/MANIFEST.MF"/>

  </target>

<target name="__build_archives" depends="buildJars">


    <!-- first we copy the jars in place otherwise, Lucee downloads them  -->
    <echots message="copy bundles in place"/>
    <copy todir="${temp}/archive/base/lucee-server/bundles" flatten="true">
      <path>
        <pathelement path="${dependencies}"/>
      </path>
    </copy>
    
    <!-- no we copy the extension in place otherwise, Lucee downloads them as well  -->
    <echots message="copy extensions in place"/>
    <copy todir="${temp}/archive/base/lucee-server/context/extensions/available" flatten="true">
      <fileset dir="${cache}">
        <include name="**/*.lex"/>
      </fileset>
    </copy>



    <echots message="getting and unzip testbox"/>
    <!-- now we need to get the testbox source -->
    <unzip src="${temp}/testbox-${testboxVersion}.zip" dest="${temp}/testbox"/>
    <delete dir="${temp}/testbox-${testboxVersion}.zip"/>


    <echots message="building different archives that get bundled (admin,doc) with help of the temporary generated lucee.jar"/>
    <!-- build the lucee-context.lar -->
    <java classname="org.apache.tools.ant.launch.Launcher" dir="${ant}" fork="true" failonerror="false" errorproperty="exc">
      <classpath path="${java.class.path}">
          <pathelement location="${temp}/lucee.jar"/>
          <pathelement path="${runtime_classpath}"/>
      </classpath>

      <arg value="-f"/>
      <arg value="${ant}/build-create-archive.xml"/>

      <jvmarg value="-Dsrc=${srcCFML}/context"/>
      <jvmarg value="-Dtemp=${temp}/archive"/>
      <jvmarg value="-Dtestbox=${temp}/testbox/testbox"/>
      <jvmarg value="-Dlucee.base.dir=${temp}/archive/base"/>
      <jvmarg value="-Dlucee.web.dir=${temp}/archive/webroot"/>
      <jvmarg value="-Dlucee.enable.dialect=true"/>
    </java>
    <echo>${exc}</echo>

</target>
<target name="__build_testbox" if="testcases">

    <echots message="execute testcases ${testcases}"/>
    <!-- execute CFML testcases -->
    <java classname="org.apache.tools.ant.launch.Launcher" dir="${ant}" fork="true" failonerror="true" errorproperty="exc2">
      <classpath path="${java.class.path}">
          <pathelement location="${temp}/lucee.jar"/>
          <pathelement path="${runtime_classpath}"/>
      </classpath>

      <arg value="-f"/>
      <arg value="${ant}/run-testcases.xml"/>

      <jvmarg value="-Dtest=${test}"/>
      <jvmarg value="-Dtemp=${temp}"/>
      <jvmarg value="-DtestboxArchive=${temp}/archive/testbox.lar"/>
      <jvmarg value="-Dexecute=${testcases}"/>

      <jvmarg value="-Dlucee.base.dir=${temp}/archive/base"/>
      <jvmarg value="-Dlucee.web.dir=${temp}/archive/webroot"/>
      <jvmarg value="-Dlucee-extensions=${extH2};${extPDF};${extHibernate};${extS3};${extChart};"/>
      <jvmarg value="-Dlucee.enable.dialect=true"/>
    </java>
    <echo>${exc2}</echo>

</target>


  <target name="__build" depends="__build_archives,__build_testbox">

    <!-- now we have to build the lucee.jar again, this time with the lar files -->
    <echots message="copy generated archive in place"/>
    <!-- copy the lucee lar -->
    <copy file="${temp}/archive/lucee-context.lar" tofile="${core}/resource/context/lucee-context.lar"/>
    <copy file="${temp}/archive/lucee-admin.lar" tofile="${core}/resource/context/lucee-admin.lar"/> 
    <copy file="${temp}/archive/lucee-doc.lar" tofile="${core}/resource/context/lucee-doc.lar"/> 

  </target>


  <target name="buildCore" depends="__build">

    <!-- copy all the source to the classes folder -->
    <echots message="copy everything to the classes folder"/>
    <copy todir="${outputDir}">
      <fileset dir="${core}">
        <exclude name=".*"/>
      </fileset>
    </copy>
  </target>

  <target name="addFelix">

    <echots message="copy the content of the felix jar to the classes folder"/>
    
    <!-- get the path for the felix jar TODO this impl could be better -->
    <felix property="felix" separator="${path.separator}" dependencies="${dependencies}"/>
    
    <!-- unzip the content to target -->
    <unzip src="${felix}" dest="${goal}">
        <!-- <patternset>
            <exclude name="**/MANIFEST.MF"/>
        </patternset> -->
    </unzip>


    <!-- Manifest need merging -->
    <loadproperties 
      srcFile="${srcLoader}/META-INF/MANIFEST.MF"
      prefix="mani.core."/>
    <manifest file="${goal}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Premain-Class" value="${mani.core.Premain-Class}"/>
      <attribute name="Agent-Class" value="${mani.core.Agent-Class}"/>
      <attribute name="Can-Redefine-Classes" value="${mani.core.Can-Redefine-Classes}"/>
      <attribute name="Can-Retransform-Classes" value="${mani.core.Can-Retransform-Classes}"/>
      <attribute name="Main-Class" value="${mani.core.Main-Class}"/>
      <attribute name="Bundle-Description" value="${mani.core.Bundle-Description}"/>
      <attribute name="Bundle-DocURL" value="${mani.core.Bundle-DocURL}"/>
      <attribute name="Bundle-License" value="${mani.core.Bundle-License}"/>
      <attribute name="Bundle-Vendor" value="${mani.core.Bundle-Vendor}"/>

      <attribute name="Built-By" value="Lucee build process"/>
      <attribute name="Created-By" value="Lucee build process"/>

    </manifest>
    <!-- TODO load dyn -->
  </target>


  <target name="addExtensions">
    <echots message="add extensions"/>
    
    <mkdir dir="${goal}/extensions/"/>

    <!-- add extension MySQL -->
    <loadmf jar="${cache}/${extMySQL}.lex" prefix="ext_mysql."/>
    <toFileName name="${ext_mysql.name}" version="${ext_mysql.version}" property="ext_mysql.filename"/>
    <copy 
      file="${cache}/${extMySQL}.lex" 
      todir="${goal}/extensions/"/>
    <move 
      file="${goal}/extensions/${extMySQL}.lex" 
      tofile="${goal}/extensions/${ext_mysql.filename}"/>
    <echo>add:${goal}/extensions/${ext_mysql.filename}</echo>

    <!-- add extension MSSQL -->
    <loadmf jar="${cache}/${extMSSQL}.lex" prefix="ext_mssql."/>
    <toFileName name="${ext_mssql.name}" version="${ext_mssql.version}" property="ext_mssql.filename"/>
    <copy 
      file="${cache}/${extMSSQL}.lex" 
      todir="${goal}/extensions/"/>
    <move 
      file="${goal}/extensions/${extMSSQL}.lex" 
      tofile="${goal}/extensions/${ext_mssql.filename}"/>
    <echo>add:${goal}/extensions/${ext_mssql.filename}</echo>

    <!-- add extension Postgre -->
    <loadmf jar="${cache}/${extPostgreSQL}.lex" prefix="ext_postgre."/>
    <toFileName name="${ext_postgre.name}" version="${ext_postgre.version}" property="ext_postgre.filename"/>
    <copy 
      file="${cache}/${extPostgreSQL}.lex" 
      todir="${goal}/extensions/"/>
    <move 
      file="${goal}/extensions/${extPostgreSQL}.lex" 
      tofile="${goal}/extensions/${ext_postgre.filename}"/>
    <echo>add:${goal}/extensions/${ext_postgre.filename}</echo>

    <!-- add extension JDTS -->
    <loadmf jar="${cache}/${extJDTsSQL}.lex" prefix="ext_jdts."/>
    <toFileName name="${ext_jdts.name}" version="${ext_jdts.version}" property="ext_jdts.filename"/>
    <copy 
      file="${cache}/${extJDTsSQL}.lex" 
      todir="${goal}/extensions/"/>
    <move 
      file="${goal}/extensions/${extJDTsSQL}.lex" 
      tofile="${goal}/extensions/${ext_jdts.filename}"/>
    <echo>add:${goal}/extensions/${ext_jdts.filename}</echo>

    <!-- add extension Chart -->
    <loadmf jar="${cache}/${extChart}.lex" prefix="ext_chart."/>
    <toFileName name="${ext_chart.name}" version="${ext_chart.version}" property="ext_chart.filename"/>
    <copy 
      file="${cache}/${extChart}.lex" 
      todir="${goal}/extensions/"/>
    <move 
      file="${goal}/extensions/${extChart}.lex" 
      tofile="${goal}/extensions/${ext_chart.filename}"/>
    <echo>add:${goal}/extensions/${ext_chart.filename}</echo>

    <!-- add extension S3 -->
    <loadmf jar="${cache}/${extS3}.lex" prefix="ext_s3."/>
    <toFileName name="${ext_s3.name}" version="${ext_s3.version}" property="ext_s3.filename"/>
    <copy 
      file="${cache}/${extS3}.lex" 
      todir="${goal}/extensions/"/>
    <move 
      file="${goal}/extensions/${extS3}.lex" 
      tofile="${goal}/extensions/${ext_s3.filename}"/>
    <echo>add:${goal}/extensions/${ext_s3.filename}</echo>

    <!-- add extension Admin -->
    <loadmf jar="${cache}/${extAdmin}.lex" prefix="ext_admin."/>
    <toFileName name="${ext_admin.name}" version="${ext_admin.version}" property="ext_admin.filename"/>
    <copy 
      file="${cache}/${extAdmin}.lex" 
      todir="${goal}/extensions/"/>
    <move 
      file="${goal}/extensions/${extAdmin}.lex" 
      tofile="${goal}/extensions/${ext_admin.filename}"/>
    <echo>add:${goal}/extensions/${ext_admin.filename}</echo>

    <!-- add extension Doc -->
    <loadmf jar="${cache}/${extDoc}.lex" prefix="ext_doc."/>
    <toFileName name="${ext_doc.name}" version="${ext_doc.version}" property="ext_doc.filename"/>
    <copy 
      file="${cache}/${extDoc}.lex" 
      todir="${goal}/extensions/"/>
    <move 
      file="${goal}/extensions/${extDoc}.lex" 
      tofile="${goal}/extensions/${ext_doc.filename}"/>
    <echo>add:${goal}/extensions/${ext_doc.filename}</echo>


  </target>


  <target name="setMvnEnv" description="set the variable right for ant">
    <property name="goal" location="${outputDir}"/>
  </target>

  <target name="buildLoaderMaven" depends="__build,setMvnEnv,addExtensions,addFelix" description="generate the loader jar" >  
    <echots message="build core"/>
    <!-- create the luce core -->
    <jar 
        basedir="${core}" 
        jarfile="${trgLoader}/${version}.lco" 
        manifest="${core}/META-INF/MANIFEST.MF"/>

    <!-- copy to core to the classes folder -->
    <copy 
        file="${trgLoader}/${version}.lco" 
        tofile="${outputDir}/core/core.lco"/>

    <!-- version -->
    <currentTime property="ct" />
    <echo file="${outputDir}/lucee/version" message="${version}:${ct}" encoding="UTF-8"/>

    
    <delete dir="${temp}"/>
    <echots message="done with the ant part, now maven build the loader"/>
    
  </target>


  <target name="setAntEnv" description="set the variable right for ant">
    <echo>before:${goal}</echo>
    <property name="goal" location="${temp}/loader"/>
<echo>after:${goal}</echo>
    

  </target>

  <target name="buildLoaderAnt" depends="__build,setAntEnv,addExtensions,addFelix" description="generate the loader jar" >  
    <echots message="build core"/>
    
    <!-- create core -->
    <jar 
        basedir="${core}" 
        jarfile="${temp}/loader/core/core.lco" 
        manifest="${core}/META-INF/MANIFEST.MF"/> 

    <!-- copy to core to the target folder -->
    <copy 
        file="${temp}/loader/core/core.lco" 
        tofile="${trgLoader}/${version}.lco"/>


    
    <!-- version -->
    <currentTime property="ct" />
    <echo file="${temp}/loader/lucee/version" message="${version}:${ct}" encoding="UTF-8"/>

    <echots message="build loader"/>
    

    <!-- genrates the jar from the loader -->
    <jar 
      basedir="${temp}/loader" 
      jarfile="${trgLoader}/lucee-${version}.jar" 
      manifest="${goal}/META-INF/MANIFEST.MF"/>


    <delete dir="${temp}"/>
    <echots message="done"/>
    
  </target>

</project>