<?xml version="1.0" encoding="UTF-8"?>
<project default="susi" basedir="${rootDir}" name="luceeCore" ><!-- TODO maybe there is a better way for this -->
  <description>
    Build Lucee Core
  </description>

  <property name="build.compiler" value="extJavac"/>
  <property name="agent" value="lucee.runtime.instrumentation.ExternalAgent"/>
  <property name="bundleName" value="Lucee Core"/>
  <property name="bundleSymbolicName" value="lucee.core"/>
  
  <property name="testboxVersion" value="2.2.0"/>
  <property name="testboxURL" 
    value="https://downloads.ortussolutions.com/ortussolutions/testbox/${testboxVersion}/testbox-${testboxVersion}.zip"/>
  <property name="extURL" value="https://extension.lucee.org/rest/extension/provider/full/"/>
  
  <property name="extMongo"       value="E6634E1A-4CC5-4839-A83C67549ECA8D5B"/>
  <property name="extH2"          value="465E1E35-2425-4F4E-8B3FAB638BD7280A"/>
  <property name="extOracle"          value="D4EDFDBD-A9A3-E9AF-597322D767E0C949"/>
  <property name="extJson"          value="A03F4335-BDEF-44DE-946FB16C47802F96"/>

  <property name="stableLoader" value="lucee-5.3.7.48"/>
  <property name="cdnUrl" value="https://cdn.lucee.org/"/>
  
  <import file="../ant/build-utils.xml"/>
  <import file="../ant/build-extensions.xml"/>
  <import file="../ant/build-bundles.xml"/>

<!-- TODO get the version number from manifest.mf -->
  
  <!-- https://www.coldbox.org/download/testbox -->
  <tstamp>
      <format property="NOW" pattern="yyyy/MM/dd HH:mm:ss z" locale="en,GB"/>
  </tstamp>

  <macrodef name="echots">
    <attribute name="message"/>
    <sequential>
      <local name="timestamp" />
      <tstamp>
        <format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
      </tstamp>
      <echo message="---------- ${timestamp} - @{message} ----------" />
    </sequential>
  </macrodef>

<!-- TODO make extension handling more dynamic
<target name="setVar">
    <splitIdVersion prefix="ext." value="${var}"/>
    
    <available file="${cache}/${ext.id}-${ext.version}.lex" property="ext.available"/>
    <echo>available: ${ext.id}:${ext.available}</echo>

</target>
-->
  <target name="init">

    <property name="srcLoader" location="${rootDir}/loader/src/main/java"/>
    <property name="srcCore" location="${rootDir}/core/src/main/java"/>
    <property name="coreManifest" location="${srcCore}/META-INF/MANIFEST.MF"/>
    <property name="cache" location="${rootDir}/cache"/>
    <property name="trgLoader" location="${rootDir}/loader/target"/>
    <property name="trgCore" location="${rootDir}/core/target"/>
    <property name="srcCFML" location="${rootDir}/core/src/main/cfml"/>
    <property name="srcAll" location="${rootDir}/core/src/main"/>
    <property name="srcInst" location="${rootDir}/instrumentation/src/main/java"/> 
    <property name="ant" location="${rootDir}/ant"/>
    <property name="test" location="${rootDir}/test"/>
    <!-- free text filter, comma delimitered to filter tests based on path -->
    <property name="testFilter" value=""/>
    <!-- list of labels to filter tests by, comma delimitered -->
    <property name="testLabels" value=""/>
    <!-- a local directory to install additional extensions -->
    <property name="testExtensions" value=""/>
    <!-- a local directory to run additional tests  -->
    <property name="testAdditional" value=""/>
    <!-- enable running disabled tests (either via _ prefix or skip=true)  -->
    <property name="testSkip" value=""/>
    <!-- enable debug output from tests (i.e tests which crash are normally silently skipped)  -->
    <property name="testDebug" value=""/>
    <!-- allow running tests with a different java version  -->
    <property name="testJavaVersionHome" value=""/>
    
    <property name="temp" location="${rootDir}/temp"/>
    <property name="loader" location="${temp}/loader"/>
    <property name="core" location="${temp}/core"/>
    <property name="tmpContext" location="${temp}/context"/>
    <property name="deployLco" value=""/>    
    <!-- <property file="${rootDir}/build.properties"/> -->


    <!-- get the extensions from manifest -->
    <!-- TODO extension handling must be more dynamic! -->
    <readRequiredExtensions file="${coreManifest}"/>
    <fail message="Missing data from [Require-Extension] inside ${coreManifest}">
    <condition>
        <or>
        <!-- Lucene -->
        <not><isset property="extLucene"/></not>
        <not><isset property="extLuceneVersion"/></not>
        <!-- Hibernate -->
        <not><isset property="extHibernate"/></not>
        <not><isset property="extHibernateVersion"/></not>
        <!-- PDF -->
        <not><isset property="extPDF"/></not>
        <not><isset property="extPDFVersion"/></not>
        <!-- S3 -->
        <not><isset property="extS3"/></not>
        <not><isset property="extS3Version"/></not>
        <!-- EHCache -->
        <not><isset property="extEHCache"/></not>
        <not><isset property="extEHCacheVersion"/></not>
        <!-- Chart -->
        <not><isset property="extChart"/></not>
        <not><isset property="extChartVersion"/></not>
        <!-- MySQL -->
        <not><isset property="extMySQL"/></not>
        <not><isset property="extMySQLVersion"/></not>
        <!-- MSSQL -->
        <not><isset property="extMSSQL"/></not>
        <not><isset property="extMSSQLVersion"/></not>
        <!-- PostgreSQL -->
        <not><isset property="extPostgreSQL"/></not>
        <not><isset property="extPostgreSQLVersion"/></not>
        <!-- JDTsSQL -->
        <not><isset property="extJDTsSQL"/></not>
        <not><isset property="extJDTsSQLVersion"/></not>
        <!-- Admin -->
        <not><isset property="extAdmin"/></not>
        <not><isset property="extAdminVersion"/></not>
        <!-- Doc -->
        <not><isset property="extDoc"/></not>
        <not><isset property="extDocVersion"/></not>
        <!-- Form -->
        <not><isset property="extForm"/></not>
        <not><isset property="extFormVersion"/></not>
        <!-- Webservice -->
        <not><isset property="extAxis"/></not>
        <not><isset property="extAxisVersion"/></not>
        <!-- Image -->
        <not><isset property="extImage"/></not>
        <not><isset property="extImageVersion"/></not>
        <!-- Esapi -->
        <not><isset property="extEsapi"/></not>
        <not><isset property="extEsapiVersion"/></not>
        <!-- Ajax -->
        <not><isset property="extAjax"/></not>
        <not><isset property="extAjaxVersion"/></not>
        <!-- Compress -->
        <not><isset property="extCompress"/></not>
        <not><isset property="extCompressVersion"/></not>
        </or>
    </condition>
    </fail>

<echo>                                                              
           `@@@@                                                               
           @@@@@@                                                              
          ``#@@@@#                                                             
          '@`@@@@@                                                             
          +@@+@@@@.                                                            
          ,@@.@@@@'                                                            
           @@ @@@@#                                                            
           ;@ @@@@#                                                            
            ; @@@@+                                                            
              @@@@'                                                            
             .@@@@,                                                            
             ;@@@@                                                             
             #@@@@                                                             
             @@@@@                                                             
             @@@@#                                                             
            ,@@@@`                                                             
            @@@@@                                                              
            @@@@#             `'@`     ,+@       :@@@#      ;@@@'       #@@@`  
           ;@@@@`            @@@@    .@@@@      @@:@@@@    @@.+@@#    +@#`@@@` 
           @@@@@            ,@@@#    @@@@,     @@   @@@  `@@   @@@   #@#  :@@# 
          ;@@@@,            @@@@`    @@@@     @@:   @@@  @@:   @@@  ;@@   ;@@' 
          @@@@@             @@@@    `@@@@    @@@    @:  @@@   .@@#  @@@   @@@  
         @@@@@..`          .@@@@    #@@@;    @@@       `@@@   @@@  #@@'  `@@#  
      +@.@@@@@:@@@@+       +@@@,    @@@@    #@@#       #@@@  @@@   @@@,  @@@   
    +@@ @@@@@ @@@@@@@`     @@@@     @@@@    @@@#       @@@@ @@@    @@@.,@@;    
    @@`@@@@@'@@@@@@@@,@'   @@@@    +@@@@   @@@@@       @@@@@@'    .@@@@@@     ;
  @; @@@@@@@'###@@@@@`@@@  @@@@    @@@@'  .@@@@@       @@@@#      ,@@@@`     '#
 ,@@@@@@@@@       .@@:@@@: @@@@   @'@@@#  @`@@@@@     `@@@@       ;@@@@     @@,
 :@@@@@@@@          +@@@@@ @@@@,:@;`@@@@@@@ @@@@@@,`+@@@@@@@.   '@@@@@@@,.#@@, 
  @@@@@@#            @@@@@ @@@@@@:  @@@@@@   @@@@@@@@@  @@@@@@@@@# `@@@@@@@@`  
   +@@#              #@@@:  @@@@    ;@@@;     @@@@@@`    @@@@@@#    `@@@@@#    
                      .+.    `                                                 
                                                                               


          In every job that must be done. There is an element of fun!                  
    </echo>

    <echo message="${version}"/>
    <!-- used for docker build -->
    <echo file="${rootDir}/buildVersionNumber.txt" message="${version}" append="false"/>
    <!-- <echo message="${name}"/>
    <echo message="${name.explanation}"/> -->
    <echo message="Root: ${rootDir}"/>
    <echo message="Required-Extensions: ${reqExt.labels}"/>
    <echo message="Java: ${java.version}" />       
    <echo message="Java: ${java.home}" />       
                    
    
    <!-- Create the time stamp -->
    <tstamp/>
    
    <delete dir="${temp}"/>
    
    <!-- Create the  directory structure needed -->
    <mkdir dir="${core}"/>
    <mkdir dir="${loader}"/>
    <mkdir dir="${temp}/agent"/>
    <mkdir dir="${cache}"/>
    <mkdir dir="${tmpContext}"/>
    <mkdir dir="${tmpContext}/cfml"/>

  </target>


    <macrodef name="loadmf">
        <attribute name="jar"/>
        <attribute name="prefix" default=""/>
        <sequential>
            <loadproperties>
                <!-- Load the manifest entries -->
                <zipentry zipfile="@{jar}" name="META-INF/MANIFEST.MF"/>
                <!-- Add the prefix -->
                <filterchain>
                    <prefixlines prefix="@{prefix}"/>
                </filterchain>
            </loadproperties>
        </sequential>
    </macrodef>

    <target name="check" depends="check-mysql,check-mssql,check-postgre,check-jdts,check-chart,check-s3,check-ehcache,check-hibernate,check-lucene,check-pdf,check-admin,check-doc,check-form,check-axis,check-image,check-esapi,check-ajax,check-compress,check-testbox,check-lucee-loader-jar,download-lucee-loader-jar">
      <mkdir dir="${temp}/loader/extensions/"/>
    </target> 

  <target name="copyDeployFiles" depends="init,check" description="copy files from source/cfml to source/java/core/src/resource">
    <echots message="copying files from ${srcCFML} and ${srcCore}/resource to ${tmpContext}/cfml"/>

    <!-- context files are both under cfml and java, merge them in a temp directory, avoid duplicated files  -->

    <copy todir="${tmpContext}/context" overwrite="true">
      <fileset dir="${srcCore}/resource/">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${tmpContext}/cfml" overwrite="true">
      <fileset dir="${srcCFML}/context">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    <copy todir="${tmpContext}/cfml/doc" overwrite="true">
      <fileset dir="${srcCFML}/context/doc">
        <include name="**/*"/>
      </fileset>
    </copy>

    <copy todir="${tmpContext}/context/admin/resources/language/" overwrite="true">
      <fileset dir="${srcCFML}/context/admin/resources/language/">
        <include name="*.xml"/>
      </fileset>
    </copy>

    <copy todir="${tmpContext}/cfml/gateway"  overwrite="true">
      <fileset dir="${srcCFML}/context/gateway">
        <include name="*.cfm"/>
        <include name="*.cfc"/>
        <include name="*.lucee"/>
        <include name="*.xml"/>
      </fileset>
    </copy>

    <copy todir="${tmpContext}/cfml/templates/error"  overwrite="true">
      <fileset dir="${srcCFML}/context/templates/error">
        <include name="*.cfm"/>
        <include name="*.cfc"/>
        <include name="*.lucee"/>
        <include name="*.xml"/>
      </fileset>
    </copy>

    <copy todir="${tmpContext}/context/admin/plugin"  overwrite="true">
      <fileset dir="${srcCFML}/context/admin/plugin">
        <include name="**/*.cfm"/>
        <include name="**/*.cfc"/>
        <include name="**/*.lucee"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>

    <!--  separate the lucee context from the admin and docs -->
    <copy todir="${tmpContext}/cfml-context">
      <fileset dir="${tmpContext}/cfml/">
        <include name="**/*"/>
        <exclude name="admin/**"/>
        <exclude name="doc/**"/>
      </fileset>
    </copy>

    <copy todir="${tmpContext}/cfml-context/admin/resources/language/" overwrite="true">
      <fileset dir="${srcCFML}/context/admin/resources/language/">
        <include name="*.xml"/>
      </fileset>
    </copy>

    <copy todir="${tmpContext}/cfml-context/admin/plugin"  overwrite="true">
      <fileset dir="${srcCFML}/context/admin/plugin">
        <include name="**/*.cfm"/>
        <include name="**/*.cfc"/>
        <include name="**/*.lucee"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>

  </target>

  <target name="agent" depends="copyDeployFiles" description="create external-agent  jar used as backup when dynamic agent fails" >
    <echots message="create external-agent.jar used as backup when dynamic agent fails"/>
    
    <!-- compie the source -->
    <javac 
      srcdir="${srcInst}" 
      source="1.8" 
      target="1.8" 
      destdir="${temp}/agent"
      debug="true" debuglevel="lines,vars,source" classpath="${dependencies}">
    </javac>

    <!-- create the manifest file -->
    <jar 
        basedir="${temp}/agent" 
        jarfile="${core}/resource/lib/lucee-external-agent.jar" 
        manifest="${srcInst}/META-INF/MANIFEST.MF"/> 
    

  </target>

  <target name="_loader" depends="agent" description="compile the source" >
    <echots message="compile loader"/>
    <!-- compie the source -->
    <javac 
      srcdir="${srcLoader}" 
      source="1.8" 
      target="1.8" 
      destdir="${temp}/loader"
      debug="true" debuglevel="lines,vars,source" classpath="${dependencies}">
    </javac>
    
    <!-- copy all non java files -->
    <copy todir="${temp}/loader">
      <fileset dir="${srcLoader}">
        <exclude name="**/*.java"/>
        <exclude name=".*"/>
      </fileset>
    </copy>

    <!-- set lucee/version file -->
    <currentTime property="ct" />
    <echo file="${temp}/loader/lucee/version" message="${version}:${ct}" encoding="UTF-8"/>
  </target>


  <target name="_core" depends="_loader" description="compile the source" >    
    <echots message="compile core"/>
    <!-- set the loader as classpath -->
    <path id="classpath">
      <pathelement location="${temp}/loader" />
      <pathelement path="${dependencies}"/>
    </path>

    <!-- <pathconvert property="classpathProp" refid="classpath"/> -->
   
    <!-- compile the core -->
    <javac 
      srcdir="${srcCore}" 
      source="1.8" 
      target="1.8" 
      destdir="${core}"
      debug="true" debuglevel="lines,vars,source">
       <classpath refid="classpath" />
    </javac>

    <!-- copy all non java files from src -->
    <copy todir="${core}">
      <fileset dir="${srcCore}">
        <exclude name="**/*.java"/>
        <exclude name=".*"/>
      </fileset>
    </copy>

    <!-- copy all non java files from temp context -->
    <copy todir="${core}/resource/context">
      <fileset dir="${tmpContext}/cfml-context">
        <exclude name="**/*.java"/>
        <exclude name="**/*.js"/>        
        <exclude name="debug/**"/>
        <exclude name=".*"/>
      </fileset>
    </copy>


    <!-- set date in default properties -->
    <loadfile property="defprop"
      srcFile="${core}/default.properties"/>
    <updatedate text="${defprop}" date="${NOW}" property="moddefprop" />
    <echo file="${core}/default.properties" message="${moddefprop}"/>

    <!-- create the manifest file -->
    <manifest file="${core}/META-INF/MANIFEST.MF" mode="update">
      <attribute name="Bundle-Version" value="${version}"/>
      <attribute name="Bundle-Name" value="${bundleName}"/>
      <attribute name="Bundle-SymbolicName" value="${bundleSymbolicName}"/>
      <attribute name="Bundle-ManifestVersion" value="2"/>
      <attribute name="Built-Date" value="${NOW}"/>
      <!-- <attribute name="State" value="${state}"/>
      <attribute name="Minor-Name" value="${name}"/>
      <attribute name="Minor-Name-Explanation" value="${name.explanation}"/>-->
    </manifest>
  </target>


  <target name="buildJars" depends="_core" description="generate temporary jars used to generate the archive" >    
    <echots message="generate temporary jars used to generate the archive"/>
    <!-- generates a jar from the core 
          this jars are only 
    -->
    <jar 
        basedir="${core}" 
        jarfile="${temp}/loader/core/core.lco" 
        manifest="${core}/META-INF/MANIFEST.MF"/> 


    <!-- generates the jar from the loader -->
    <jar 
      basedir="${temp}/loader" 
      jarfile="${temp}/lucee.jar" 
      manifest="${srcLoader}/META-INF/MANIFEST.MF"/>

  </target>


<target name="test_stable_loader">
    <!-- no we copy the extension in place otherwise, Lucee downloads them as well  -->
    <echots message="copy extensions in place"/>
    <copy todir="${temp}/stable/base/lucee-server/context/extensions/available" flatten="true">
      <fileset dir="${cache}">
        <include name="**/*.lex"/>
      </fileset>
    </copy>

    <!-- make a copy of the stable fat jar  -->
    <copy file="${cache}/${stableLoader}.jar" tofile="${temp}/stable/loader.jar"/>
    <copy file="${trgLoader}/${version}.lco" tofile="${temp}/stable/temp/core/core.lco"/>
    <!-- update the fat jar with the current core .lco -->
    <jar destfile="${temp}/stable/loader.jar" update="true">
       <fileset dir="${temp}/stable/temp"/>
    </jar>


    <echots message="try running the new core build with an older stable loader"/>
    <!-- build the lucee-context.lar -->
    <java classname="org.apache.tools.ant.launch.Launcher" dir="${ant}" fork="true" failonerror="true" errorproperty="exc">
      <classpath path="${java.class.path}">
          <pathelement location="${temp}/stable/loader.jar"/>
          <pathelement path="${runtime_classpath}"/>
      </classpath>

      <arg value="-f"/>
      <arg value="${ant}/build-test-stable-loader.xml"/>

      <jvmarg value="-DstableLoader=${stableLoader}"/>
      <jvmarg value="-Dlucee.base.dir=${temp}/stable/base"/>
      <jvmarg value="-Dlucee.web.dir=${temp}/stable/webroot"/>
      <jvmarg value="-Dlucee.enable.dialect=true"/>
      <jvmarg value="-Dlucee.extensions.install=true"/>
      <jvmarg value="-Dlucee.full.null.support=false"/>
      <!-- older loader can dynamically download required bundles from the update provider -->
      <jvmarg value="-Dlucee.enable.bundle.download=true"/>
      <!--
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5000"/>
      -->
    </java>
    <outputTrimmedString str="${exc}"/>
</target>

<target name="__build_archives" depends="buildJars,__extract_testbox">
    <!-- first we copy the jars in place otherwise, Lucee downloads them  -->
    <echots message="copy bundles in place"/>
    <addBundles 
      bundles="${dependencies}" 
      target="${temp}/archive/base/lucee-server/bundles"
      coremanifest="${coreManifest}"/>

    <!-- no we copy the extension in place otherwise, Lucee downloads them as well  -->
    <echots message="copy extensions in place"/>
    <copy todir="${temp}/archive/base/lucee-server/context/extensions/available" flatten="true">
      <fileset dir="${cache}">
        <include name="**/*.lex"/>
      </fileset>
    </copy>

    <echots message="building different archives that get bundled (admin,doc) with help of the temporary generated lucee.jar"/>
    <!-- build the lucee-context.lar -->
    <java classname="org.apache.tools.ant.launch.Launcher" dir="${ant}" fork="true" failonerror="true" errorproperty="exc">
      <classpath path="${java.class.path}">
          <pathelement location="${temp}/lucee.jar"/>
          <pathelement path="${runtime_classpath}"/>
      </classpath>

      <arg value="-f"/>
      <arg value="${ant}/build-create-archive.xml"/>

      <!---
      <jvmarg value="-XX:StartFlightRecording=disk=true,dumponexit=true,filename=${temp}/../lucee-compile.jfr,maxsize=1024m,maxage=1d,settings=profile,path-to-gc-roots=true"/>
      -->

      <jvmarg value="-Dsrc=${tmpContext}"/>
      <jvmarg value="-Dtemp=${temp}/archive"/>
      <jvmarg value="-Dtestbox=${temp}/testbox/testbox"/>
      <jvmarg value="-DcompileTestBox=${compileTestBox}"/>
      <jvmarg value="-Dlucee.base.dir=${temp}/archive/base"/>
      <jvmarg value="-Dlucee.web.dir=${temp}/archive/webroot"/>
      <jvmarg value="-Dlucee.enable.dialect=true"/>
      <jvmarg value="-Dlucee.extensions.install=true"/>
      <jvmarg value="-Dlucee.full.null.support=false"/>
      <jvmarg value="-Dlucee.enable.bundle.download=false"/>
      <!--
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5000"/>
      -->
    </java>
    <outputTrimmedString str="${exc}"/>
</target>

<target name="__extract_testbox" if="testcases">
    <echots message="getting and unzip testbox"/>
    <!-- now we need to get the testbox source -->
    <copy 
			file="${cache}/testbox-${testboxVersion}.zip" 
			todir="${temp}"/>
    <!-- testbox -->		
    <unzip src="${temp}/testbox-${testboxVersion}.zip" dest="${temp}/testbox"/>
    <delete dir="${temp}/testbox-${testboxVersion}.zip"/>
</target>

<target name="__build_testbox" if="testcases">
    <!-- optionally install test lucee extensions from a directory -->
    <deployTestExtensions
      srcdir="${testExtensions}" 
      deploydir="${temp}/archive/base/lucee-server/deploy/"/>

    <listDirectory directory="${test}/lib" delimiter=":" returnvalue="test_jars"/>
    <echots message="execute testcases ${testcases}"/>
    <!-- execute CFML testcases -->
    <java classname="org.apache.tools.ant.launch.Launcher" dir="${ant}" fork="true" failonerror="true" errorproperty="exc2" jvm="${testJavaVersionHome}">
      <classpath path="${java.class.path}">
          <pathelement location="${temp}/lucee.jar"/>
          <pathelement path="${runtime_classpath}"/>
          <pathelement path="${test_jars}"/>
      </classpath>

      <arg value="-f"/>
      <arg value="${ant}/run-testcases.xml"/>

      <jvmarg value="-Dtest=${test}"/>
      <jvmarg value="-DtestFilter=${testFilter}"/>
      <jvmarg value="-DtestLabels=${testLabels}"/>
      <jvmarg value="-DtestAdditional=${testAdditional}"/>
      <jvmarg value="-DtestSkip=${testSkip}"/>
      <jvmarg value="-DtestDebug=${testDebug}"/>
      <jvmarg value="-Dtemp=${temp}"/>
      <jvmarg value="-Dbasedir=${baseDir}"/>
      <jvmarg value="-Dsrcall=${srcAll}"/>
      <!-- <jvmarg value="-Djdk.attach.allowAttachSelf=true"/> -->
      <jvmarg value="-DtestboxArchive=${temp}/archive/testbox.lar"/>
      <jvmarg value="-Dexecute=${testcases}"/>
      <jvmarg value="-DindividualStorageKeys=false"/>
      <jvmarg value="-Dlucee.base.dir=${temp}/archive/base"/>
      <jvmarg value="-Dlucee.web.dir=${temp}/archive/webroot"/>
      <jvmarg value="-Dlucee-extensions=${extH2},${extMongo},${extOracle},${extJson}"/>
      <jvmarg value="-Dlucee.enable.dialect=true"/>
      <jvmarg value="-Dlucee.extensions.install=true"/>
      <jvmarg value="-Dlucee.full.null.support=false"/>
      <!--
      <jvmarg value="-XX:StartFlightRecording=disk=true,dumponexit=true,filename=${temp}/../lucee-testcases.jfr,maxsize=1024m,maxage=1d,settings=profile,path-to-gc-roots=true"/>
      <jvmarg value="-Dlucee.system.out=file:.../out.txt"/>
      <jvmarg value="-Dlucee.system.err=file:.../err.txt"/>
      -->
      <!--
      <jvmarg value="-Xdebug"/>
      <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5000"/>
      -->

      <!--
        felix.log.level
        lucee.controller.disabled
    -->

    </java>
    <outputTrimmedString str="${exc2}"/>
</target>

<target name="upload_to_s3">
    <jar 
      basedir="${outputDir}/" 
      jarfile="${trgLoader}/lucee-${version}.jar" 
      manifest="${goal}/META-INF/MANIFEST.MF"/>
    <echots message="build-jar-man:${goal}/META-INF/MANIFEST.MF"/>    

    <listDirectory directory="${test}/lib" delimiter=":" returnvalue="test_jars"/>
    <echots message="upload to S3"/>
    <echots message="${test_jars}"/>
    
    <!-- Upload to S3 -->
    <java classname="org.apache.tools.ant.launch.Launcher" dir="${ant}" fork="true" failonerror="true" errorproperty="exc3">
      <classpath path="${java.class.path}">
          <pathelement location="${trgLoader}/lucee-${version}.jar"/>
          <pathelement path="${runtime_classpath}"/>
          <pathelement path="${test_jars}"/>
      </classpath>

      <arg value="-f"/>
      <arg value="${ant}/upload-to-s3.xml"/>

      <jvmarg value="-Dbasedir=${baseDir}"/>
      <jvmarg value="-Dlucee.base.dir=${temp}/archive/base"/>
      <jvmarg value="-Dlucee.web.dir=${temp}/archive/webroot"/>
      <!-- <jvmarg value="-Dlucee-extensions=${extS3}"/> -->
      <jvmarg value="-Dlucee.extensions.install=true"/>
      <jvmarg value="-Dlucee.full.null.support=false"/>
      <jvmarg value="-Dluceejar=${trgLoader}/lucee-${version}.jar"/>
      <jvmarg value="-DluceeCore=${trgLoader}/${version}.lco"/>
      <jvmarg value="-DtrgLoader=${trgLoader}"/>

    </java>
    <outputTrimmedString str="${exc3}"/>

</target>

<target name="test_warm_up" if="testcases">
    <jar 
      basedir="${outputDir}/" 
      jarfile="${trgLoader}/lucee-${version}.jar" 
      manifest="${goal}/META-INF/MANIFEST.MF"/>
    <echots message="build-jar-man:${goal}/META-INF/MANIFEST.MF"/>

    <echots message="Testing LUCEE_ENABLE_WARMUP"/>
    
    <!-- Test Lucee Warmup -->
    <java classname="org.apache.tools.ant.launch.Launcher" dir="${ant}" fork="true" failonerror="true" errorproperty="exc4">
      <classpath path="${java.class.path}">
          <pathelement location="${trgLoader}/lucee-${version}.jar"/>
          <pathelement path="${runtime_classpath}"/>
      </classpath>

      <arg value="-f"/>
      <arg value="${ant}/build-warmup-test.xml"/>

      <jvmarg value="-Dbasedir=${baseDir}"/>
      <jvmarg value="-Dlucee.base.dir=${temp}/archive/base"/>
      <jvmarg value="-Dlucee.web.dir=${temp}/archive/webroot"/>
      <!-- <jvmarg value="-Dlucee-extensions=${extS3}"/> -->
      <jvmarg value="-Dlucee.extensions.install=true"/>
      <jvmarg value="-Dlucee.full.null.support=false"/>
      <jvmarg value="-Dlucee.enable.warmup=true"/>
      <jvmarg value="-Dluceejar=${trgLoader}/lucee-${version}.jar"/>
      <jvmarg value="-DluceeCore=${trgLoader}/${version}.lco"/>
      <jvmarg value="-DtrgLoader=${trgLoader}"/>

    </java>
    <echo>${exc4}</echo>

</target>


  <target name="__build" depends="__build_archives,__build_testbox">
    <!-- now we have to build the lucee.jar again, this time with the lar files -->
    <echots message="copy generated archive in place"/>
    <!-- copy the lucee lar -->
    <copy file="${temp}/archive/lucee-context.lar" tofile="${core}/resource/context/lucee-context.lar"/>
    <copy file="${temp}/archive/lucee-admin.lar" tofile="${core}/resource/context/lucee-admin.lar"/> 
    <copy file="${temp}/archive/lucee-doc.lar" tofile="${core}/resource/context/lucee-doc.lar"/> 
  </target>

  <!-- not used -->
  <target name="buildCore" depends="__build">
    <!-- copy all the source to the classes folder -->
    <echots message="copy everything to the classes folder"/>
    <copy todir="${outputDir}">
      <fileset dir="${core}">
        <exclude name=".*"/>
      </fileset>
    </copy>
  </target>

  <target name="addFelix" if="buildLoaderJar">
    <echots message="copy the content of the felix jar to the classes folder"/>
    
    <!-- get the path for the felix jar TODO this impl could be better -->
    <felix property="felix" separator="${path.separator}" dependencies="${dependencies}"/>
    
    <!-- unzip the content to target -->
    <unzip src="${felix}" dest="${goal}">
        <!-- <patternset>
            <exclude name="**/MANIFEST.MF"/>
        </patternset> -->
    </unzip>

    <!-- Manifest need merging -->
    <loadproperties 
      srcFile="${srcLoader}/META-INF/MANIFEST.MF"
      prefix="mani.core."/>

    <echots message="create-jar-man:${goal}/META-INF/MANIFEST.MF"/>
    <manifest file="${goal}/META-INF/MANIFEST.MF" mode="replace">
      <attribute name="Premain-Class" value="${mani.core.Premain-Class}"/>
      <attribute name="Agent-Class" value="${mani.core.Agent-Class}"/>
      <attribute name="Can-Redefine-Classes" value="${mani.core.Can-Redefine-Classes}"/>
      <attribute name="Can-Retransform-Classes" value="${mani.core.Can-Retransform-Classes}"/>
      <attribute name="Main-Class" value="${mani.core.Main-Class}"/>
      <attribute name="Bundle-Description" value="${mani.core.Bundle-Description}"/>
      <attribute name="Bundle-DocURL" value="${mani.core.Bundle-DocURL}"/>
      <attribute name="Bundle-License" value="${mani.core.Bundle-License}"/>
      <attribute name="Bundle-Vendor" value="${mani.core.Bundle-Vendor}"/>

      <attribute name="Built-By" value="Lucee build process"/>
      <attribute name="Created-By" value="Lucee build process"/>

    </manifest>
    <!-- TODO load dyn -->
  </target>

  <target name="setMvnEnv" description="set the variable right for ant">
    <property name="goal" location="${outputDir}"/>
  </target>

  <target 
    name="buildLoaderMaven" 
    depends="_buildLoaderMaven,upload_to_s3" 
    description="generate the loader jar" >

  </target>

  <target name="createCore">
    <echots message="build core .lco"/>
    <!-- create the luce core -->
    <jar 
        basedir="${core}" 
        jarfile="${trgLoader}/${version}.lco" 
        manifest="${core}/META-INF/MANIFEST.MF"/>

    <!-- copy to core to the classes folder -->
    <copy 
        file="${trgLoader}/${version}.lco" 
        tofile="${outputDir}/core/core.lco"/>

    <!-- optionally copy lco file to an existing Lucee install -->
    <deployLco
      srcdir="${trgLoader}" 
      deploydir="${deployLco}"
      name="${version}.lco"/>

  </target>

  <target name="createLoader" if="buildLoaderJar">
     <!-- generates the jar from the loader -->
    <echots message="build loader .jar"/>
    
    <jar 
      basedir="${temp}/loader" 
      jarfile="${trgLoader}/lucee-${version}.jar" 
      manifest="${goal}/META-INF/MANIFEST.MF"/>
    <echots message="build-jar-ant:${goal}/META-INF/MANIFEST.MF"/>  
  </target>

  <target name="_buildLoaderMaven" depends="__build,setMvnEnv,addExtensions,addBundles,addFelix,createCore,createLoader,test_warm_up,test_stable_loader" description="generate the loader jar">
    <!-- version -->
    <currentTime property="ct" />
    <echo file="${outputDir}/lucee/version" message="${version}:${ct}" encoding="UTF-8"/>
    
    <delete dir="${temp}"/>
    <echots message="done with the ant part, now maven build the loader"/>
    
  </target>

  <target name="setAntEnv" description="set the variable right for ant">
    <echo>before:${goal}</echo>
    <property name="goal" location="${temp}/loader"/>
    <echo>after:${goal}</echo>  
  </target>

  <target name="buildLoaderAnt" depends="__build,setAntEnv,addExtensions,addBundles,addFelix,createCore,createLoader,test_warm_up,test_stable_loader" description="generate the loader jar" >
    <!-- version -->
    <currentTime property="ct" />
    <echo file="${temp}/loader/lucee/version" message="${version}:${ct}" encoding="UTF-8"/>
    
    <delete dir="${temp}"/>
    <echots message="done"/>
  </target>

</project>
