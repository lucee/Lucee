<?xml version="1.0" encoding="UTF-8"?>
<project default="run" basedir="." name="Lucee">

<macrodef name="echots">
	<attribute name="message"/>
	<sequential>
	  <local name="timestamp" />
	  <tstamp>
		<format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
	  </tstamp>
	  <echo message="---------- ${timestamp} - @{message} ----------" />
	</sequential>
  </macrodef>

<target name="run">

<echo><![CDATA[
  _____         _   ____
 |_   _|__  ___| |_| __ )  _____  __
   | |/ _ \/ __| __|  _ \ / _ \ \/ /
   | |  __/\__ \ |_| |_) | (_) >  <
   |_|\___||___/\__|____/ \___/_/\_\

]]></echo>
<echots message="start TestBox testcases"/>

<!-- TODO this is hard to debug, any errors, it just fails with zero feedback -->
<script language="CFML">
<![CDATA[
encodeForHTML("abc"); // test if ESAPI extension exist right away
systemOutput("---------- #DateTimeFormat(now(),'yyyy-mm-dd HH:nn:ss')# - Lucee Started ----------", true);
request._start = getTickCount();
if (execute) {

request.basedir = basedir;
request.srcall = srcall;
request.testFilter = testFilter;

request.WEBADMINPASSWORD = "webweb";
request.SERVERADMINPASSWORD = "webweb";
server.WEBADMINPASSWORD = request.WEBADMINPASSWORD;
server.SERVERADMINPASSWORD = request.SERVERADMINPASSWORD;

NL = "
";
TAB = "	";

fixCase = {};
for (el in ["bundleId", "debugBuffer", "endTime", "error", "failMessage", "failOrigin", "globalException", "name", "parentId", "path", "specStats", 
	"startTime", "status", "suiteId", "suiteStats", "totalDuration", "totalError", "totalFail", "totalPass", "totalSkipped", "totalSpecs", "totalSuites"]) {
	fixCase[ucase(el)] = el;
}

failedTestCases = [];

try {

	function mem(type) {
		var qry = getMemoryUsage(type);
		loop query=qry {
			var perc = int(100 / qry.max * qry.used);
			if(qry.max<0 || qry.used<0 || perc<90)
				continue;
			systemOutput(TAB & replace(ucFirst(type), '_', ' ') & " " & qry.name & ": " & perc & "%", true);
		}
	}

	// strips off the stack trace to exclude testbox and back to the first .cfc call in the stack
	function printStackTrace( st ){
		local.i = find( "/testbox/", arguments.st );
		if ( i eq 0 ){ // dump it all out
			systemOutput( TAB & arguments.st, true );
			return;
		}
		local.tmp = mid( arguments.st, 1, i ); // strip out anything after testbox
		local.tmp2 = reverse( local.tmp );
		local.i = find( ":cfc.", local.tmp2 ); // find the first cfc line
		if ( local.i gt 0 ){
			local.i = len( local.tmp )-i;
			local.j = find( ")", local.tmp, local.i ); // find the end of the line
			local.tmp = mid( local.tmp, 1, local.j );
		}
		systemOutput( TAB & local.tmp, true );
	};

	// set a password for the admin
	try {
		admin
			action="updatePassword"
			type="web"
			oldPassword=""
			newPassword="#request.WEBADMINPASSWORD#";
	}
	catch(e){}	// may exist from previous execution

	try {
		admin
			action="updatePassword"
			type="server"
			oldPassword=""
			newPassword="#request.SERVERADMINPASSWORD#";
	}
	catch(e){}	// may exist from previous execution

	systemOutput("set password #dateTimeFormat(now())#", true);

	if (len(request.testFilter) gt 0)
		systemOutput(NL & "Filtering only tests containing: [" & request.testFilter & "]" & NL, true);	
	else
		systemOutput(NL & 'Running all tests, to run a subset of test(s), use the parameter -DtestFilter="image"'& NL, true);	

	// output deploy log
	pc=getPageContext();
	config=pc.getConfig();
	configDir=config.getConfigServerDir();
	logsDir=configDir&server.separator.file&"logs";
	deployLog=logsDir&server.separator.file&"deploy.log";
	//dump(deployLog);
	content=fileRead(deployLog);
	systemOutput("-------------- Deploy.Log ------------",true);
	systemOutput(content,true);
	systemOutput("--------------------------------------",true);
	

	// create "/test" mapping
	admin
		action="updateMapping"
		type="web"
		password="#request.WEBADMINPASSWORD#"
		virtual="/test"
		physical="#test#"
		toplevel="true"
		archive=""
		primary="physical"
		trusted="no";

	systemOutput("set /test mapping #dateTimeFormat(now())#", true);

	// you can also provide a json file with your environment variables, i.e. just set LUCEE_BUILD_ENV="c:\work\lucee\loader\env.json"
	setupTestServices = new test._setupTestServices().setup();	

	// set the testbox mapping
	application
		action="update"
		componentpaths = "#[{archive:testboxArchive}]#";

	systemOutput("update componentpaths #dateTimeFormat(now())#" & NL, true);

	// load testbox
	SystemOut=createObject("java", "lucee.commons.lang.SystemOut");
	out=SystemOut.setOut(nullValue());
	//err=SystemOut.setErr(nullValue());

	request._tick = getTickCount();
	request.overhead = [];

	admin 
		action="getMappings"
		type="web"
		password="#request.WEBADMINPASSWORD#"
		returnVariable="mappings";
		
	systemOutput("-------------- Mappings --------------", true);
	loop query="mappings" {
		systemOutput("#mappings.virtual# #TAB# #mappings.strPhysical# " 
			& (len(mappings.strArchive) ? "[#mappings.strArchive#] " : "")
			& (len(mappings.inspect) ? "(#mappings.inspect#)" : ""), true);
	}
	
	systemOutput(NL & "-------------- Start Tests -----------", true);

	silent {
		try {

			dir = {
				 mapping : "/test"
				,recurse : true
				,filter  : function(path){
		//			echo(arguments.path&"
		//");
					var name=listLast(arguments.path,"\/");
					if (len(request.testFilter) gt 0 and FindNoCase(request.testFilter, arguments.path) eq 0) return false;

					// get parent
					var p = getDirectoryFromPath(arguments.path);
					p = left(p, p.len() - 1);
					p = listCompact(p, "\/");

					// get grand parent
					var pp = getDirectoryFromPath(p);
					pp = left(pp, pp.len() - 1);
					pp = listCompact(pp, "\/");

					// only testcases in sub directory of "test" are allowed
					var _test = listCompact(test,"\/");
					return (_test == pp || _test == p) && left(name, 1) != "_";
				}
			};

			tb = new testbox.system.TestBox(directory=dir, reporter="console");

			// execute
			report = tb.run(callbacks=
{
	 onBundleStart = function(cfc, testResults){
		var meta = getComponentMetadata(cfc);
		SystemOut.setOut(out);
		//SystemOut.setErr(err);
		//"=============================================================" 
		systemOutput(TAB & meta.name, false);
		SystemOut.setOut(nullValue());
		//SystemOut.setErr(nullValue());
	} // onBundleStart = function
	,onBundleEnd = function(cfc, testResults){
		var bundle = arrayLast(testResults.getBundleStats());
		var oh = (getTickCount()-request._tick)-bundle.totalDuration;
		request._tick = getTickCount();
		ArrayAppend(request.overhead, oh);
		try {
			SystemOut.setOut(out);
			//SystemOut.setErr(err);
			systemOutput(TAB & " (#bundle.totalPass# tests passed in #NumberFormat(bundle.totalDuration)# ms)", true);
			//mem("non_heap");
			//mem("heap");

		// we have an error
		if ((bundle.totalFail + bundle.totalError) > 0) {

			systemOutput("ERRORED" & NL & "	Suites/Specs: #bundle.totalSuites#/#bundle.totalSpecs#
	Failures: #bundle.totalFail#
	Errors:   #bundle.totalError#
	Pass:     #bundle.totalPass#
	Skipped:  #bundle.totalSkipped#"
			, true);

			if (!isNull(bundle.suiteStats)) {
				loop array=bundle.suiteStats item="local.suiteStat" {
					if (!isNull(suiteStat.specStats)) {
						loop array=suiteStat.specStats item="local.specStat" {

							if (!isNull(specStat.failMessage) && len(trim(specStat.failMessage))) {

								var failedTestCase = {
									 type       : "Failed"
									,bundle     : bundle.name
									,testCase   : specStat.name
									,errMessage : specStat.failMessage
									,stackTrace : []
								};
								failedTestCases.append(failedTestCase);

								systemOutput(NL & specStat.name);
								systemOutput(NL & TAB & "Failed: " & specStat.failMessage, true);

								if (!isNull(specStat.failOrigin) && !isEmpty(specStat.failOrigin)){

									var rawStackTrace = specStat.failOrigin;
									var testboxPath = getDirectoryFromPath(rawStackTrace[1].template);

									//systemOutput(TAB & TAB & "at", true);

									loop array=rawStackTrace item="local.st" index="local.i" {

										if (!st.template.hasPrefix(testboxPath)){
											if (local.i eq 1 or st.template does not contain "testbox"){
												var frame = st.template & ":" & st.line;
												failedTestCase.stackTrace.append(frame);
												systemOutput(TAB & frame, true);
											}
										}
									}
								} 
								systemOutput(NL);
							} // if !isNull

							if (!isNull(specStat.error) && !isEmpty(specStat.error)){

								var failedTestCase = {
									 type       : "Errored"
									,bundle     : bundle.name
									,testCase   : specStat.name
									,errMessage : specStat.error.Message
									,stackTrace : []
								};
								failedTestCases.append(failedTestCase);

								systemOutput(NL & specStat.name);
								systemOutput(NL & TAB & "Errored: " & specStat.error.Message, true);
								if (len(specStat.error.Detail))
									systemOutput(TAB & "Detail: " & specStat.error.Detail, true);

								if (!isNull(specStat.error.TagContext) && !isEmpty(specStat.error.TagContext)){

									var rawStackTrace = specStat.error.TagContext;

									//systemOutput(TAB & TAB & "at", true);

									loop array=rawStackTrace item="local.st" index="local.i" {
										if (local.i eq 1 or st.template does not contain "testbox"){
											var frame = st.template & ":" & st.line;
											failedTestCase.stackTrace.append(frame);
											systemOutput(TAB & frame, true);
										}
									}
									systemOutput(NL);
									/*
									if (arrayLen(rawStackTrace) gt 0){
										systemOutput(TAB & rawStackTrace[1].codePrintPlain, true);
										systemOutput(NL);
									}
									*/
								}
								if (!isNull(specStat.error.StackTrace) && !isEmpty(specStat.error.StackTrace)){
									printStackTrace(specStat.error.StackTrace);
									systemOutput(NL);
								}

							//	systemOutput(NL & serialize(specStat.error), true);

							} // if !isNull
						}
					}
				}
			}
			//systemOutput(serializeJson(bundle.suiteStats));
		}

	// exceptions
	if (!isSimpleValue(bundle.globalException)) {
		systemOutput("Global Bundle Exception
		#bundle.globalException.type#
		#bundle.globalException.message#
		#bundle.globalException.detail#
=============================================================
Begin Stack Trace
=============================================================
#bundle.globalException.stacktrace#
=============================================================
  End Stack Trace
=============================================================", true);
	}

//systemOutput("=============================================================",true);
		} // try
		finally {
			SystemOut.setOut(nullValue());
			//SystemOut.setErr(nullValue());
		} // finally
	} // onBundleEnd = function
	/*,onSuiteStart 	= function( bundle, testResults, suite ){}
	,onSuiteEnd		= function( bundle, testResults, suite ){}
	,onSpecStart		= function( bundle, testResults, suite, spec ){}
	,onSpecEnd 		= function( bundle, testResults, suite, spec ){}*/
} // callbacks
			); // report = tb.run

	 		// get the result
	 		result = tb.getResult();
 		}
 		finally {
 			//SystemOut.setOut(out);
 			//SystemOut.setErr(err);
 		} // try
	} // silent


	echo(NL & NL & "=============================================================" & NL);
	echo("TestBox Version: #tb.getVersion()#" & NL);
	echo("Lucee Version: #server.lucee.version#" & NL);
	echo("Java Version: #server.java.version#" & NL);
	echo("Total Execution time: (#NumberFormat((getTickCount()-request._start)/1000)# s)" & NL);
	echo("Test Execution time: (#NumberFormat(result.getTotalDuration()/1000)# s)" & NL);	
	echo("Average Test Overhead: (#NumberFormat(ArrayAvg(request.overhead))# ms)" & NL);
	echo("Total Test Overhead: (#NumberFormat(ArraySum(request.overhead))# ms)" & NL);

	
	
	echo("=============================================================" & NL & NL);
	echo("-> Bundles/Suites/Specs: #result.getTotalBundles()#/#result.getTotalSuites()#/#result.getTotalSpecs()#" & NL);
	echo("-> Pass:     #result.getTotalPass()#" & NL);
	echo("-> Skipped:  #result.getTotalSkipped()#" & NL);
	echo("-> Failures: #result.getTotalFail()#" & NL);
	echo("-> Errors:   #result.getTotalError()#" & NL);
	
	servicesReport = new test._setupTestServices().reportServiceSkipped();
	for (s in servicesReport){
		echo ( s & NL );
	}

		if (!isEmpty(failedTestCases)){
			echo(NL);
			for (el in failedTestCases){
				echo(el.type & ": " & el.bundle & NL & TAB & el.testCase & NL);
				echo(TAB & el.errMessage & NL);
				if (!isEmpty(el.stackTrace)){
					//echo(TAB & TAB & "at" & NL);
					for (frame in el.stackTrace){
						echo(TAB & TAB & frame & NL);
					}
				}
				echo(NL);
			}
			echo(NL);
		}

 		if ((result.getTotalFail() + result.getTotalError()) > 0) {
 			throw "TestBox could not successfully execute all testcases: #result.getTotalFail()# tests failed; #result.getTotalError()# tests errored.";
 		}
	}
	catch(e){
		echo("-------------------------------------------------------" & NL);
		echo("Testcase failed:" & NL);
		echo( e.message & NL);
		echo( ReReplace( Serialize(e), "[\r\n]\s*([\r\n]|\Z)", Chr(10), "ALL" ) & NL); // avoid too much whitespace from dump
		echo("-------------------------------------------------------" & NL);
		rethrow;
	}

} // if (execute)
]]>
  </script>

</target>
</project>
